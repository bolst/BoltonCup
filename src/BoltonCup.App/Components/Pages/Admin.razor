@page "/admin"

@attribute [Authorize(Roles="admin")]

@inject IBCData BCData

<AuthorizeView Context="authContext">
    <div class="py-10 px-6">
        <MudTabs Style="background-color: var(--mud-palette-surface)" Centered>
            <MudTabPanel Text="Pending">
                @if (registrations is not null)
                {
                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Text">@ForwardRegCount F</MudChip>
                    <MudChip T="string" Color="Color.Secondary" Variant="Variant.Text">@DefenseRegCount D</MudChip>
                    <MudChip T="string" Color="Color.Tertiary" Variant="Variant.Text">@GoalieRegCount G</MudChip>

                    <MudDataGrid Items="@registrations" Hover>
                        <ToolBarContent>
                            <MudButton
                                OnClick="@(() => SendEmail(registrations.Select(x => x.Email)))"
                                Color="Color.Info"
                                Variant="Variant.Filled">
                                Email Pendings
                            </MudButton>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Title="Name" Property=@(x => $"{x.LastName}, {x.FirstName}")/>
                            <PropertyColumn Title="Email" Property="x => x.Email"/>
                            <PropertyColumn Title="Position" Property="x => x.Position" />
                            <PropertyColumn Title="Highest Level" Property="x => x.HighestLevel"/>
                            <TemplateColumn>
                                <CellTemplate>
                                    <ConfirmButton Color="Color.Success" OnClick="@(() => OnAdmit(context.Item))">Admit</ConfirmButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                }
            </MudTabPanel>
            <MudTabPanel Text="Admitted">
                @if (accounts is not null)
                {
                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Text">@ForwardAccCount F</MudChip>
                    <MudChip T="string" Color="Color.Secondary" Variant="Variant.Text">@DefenseAccCount D</MudChip>
                    <MudChip T="string" Color="Color.Tertiary" Variant="Variant.Text">@GoalieAccCount G</MudChip>
                    <MudChip T="string" Color="Color.Success" Variant="Variant.Text">@PayedCount PAYED</MudChip>
                    
                    <MudButton
                        OnClick="@(() => SendEmail(accounts.Where(a => a.IsActive).Select(a => a.Email)))"
                        Color="Color.Info"
                        Variant="Variant.Filled">
                        Email Admits
                    </MudButton>
                    
                    <MudDataGrid 
                        Items="@accounts.Where(a => a.IsActive).OrderBy(a => a.Payed)"
                        QuickFilter="QuickFilter"
                        ExpandSingleRow
                        Hover>
                        <ToolBarContent>
                            <MudTextField 
                                @bind-Value="_searchString" 
                                Placeholder="Search" 
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search" 
                                IconSize="Size.Medium" 
                                Clearable
                                Immediate />
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Title="Name" Property="@(x => $"{x.LastName}, {x.FirstName}")" />
                            <PropertyColumn Title="Email" Property="x => x.Email"/>
                            <PropertyColumn Title="Position" Property="x => x.Position" />
                            <PropertyColumn Title="Highest Level" Property="x => x.HighestLevel"/>
                            <TemplateColumn Title="Payed">
                                <CellTemplate>
                                    @if (context.Item.Payed)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn>
                                <CellTemplate>
                                    <ConfirmButton Color="Color.Error" ConfirmColor="Color.Error" OnClick="@(() => OnRemove(context.Item))">Remove</ConfirmButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <ChildRowContent>
                            @if (!context.Item.Payed)
                            {
                                <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="@(() => OnMarkPlayerPayed(context))">Mark as Payed</MudButton>
                            }
                        </ChildRowContent>
                    </MudDataGrid>
                }
            </MudTabPanel>
        </MudTabs>
    </div>
</AuthorizeView>


@code{

    private IEnumerable<RegisterFormModel>? registrations;
    private IEnumerable<BCAccount>? accounts;
    private string _searchString = string.Empty;

    private int ForwardRegCount => registrations?.Count(r => r.Position == "forward") ?? 0;
    private int DefenseRegCount => registrations?.Count(r => r.Position == "defense") ?? 0;
    private int GoalieRegCount => registrations?.Count(r => r.Position == "goalie") ?? 0;    
    
    private int ForwardAccCount => accounts?.Count(r => r.Position == "forward") ?? 0;
    private int DefenseAccCount => accounts?.Count(r => r.Position == "defense") ?? 0;
    private int GoalieAccCount => accounts?.Count(r => r.Position == "goalie") ?? 0;

    private int PayedCount => accounts?.Count(r => r.Payed) ?? 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        accounts = await BCData.GetAccountsAsync();
        
        registrations = (await BCData.GetRegistrationsAsync()).Where(r => accounts.All(a => a.Email != r.Email || !a.IsActive));
        registrations = registrations.OrderBy(r => r.LastName);
    }

    private async Task OnAdmit(RegisterFormModel form)
    {
        string errorMessage = await BCData.AdmitUserAsync(form);
        
        await LoadDataAsync();
        StateHasChanged();
    }

    private async Task OnRemove(BCAccount account)
    {
        string errorMessage = await BCData.RemoveAdmittedUserAsync(account);
        
        await LoadDataAsync();
        StateHasChanged();
    }

    private async Task SendEmail(IEnumerable<string> recipients)
    {
        if (Email.Default.IsComposeSupported)
        {
            var message = new EmailMessage
            {
                To = recipients.ToList(),
                Subject = "Bolton Cup",
                BodyFormat = EmailBodyFormat.PlainText,
                // Bcc = recipients.ToList()
            };

            await Email.Default.ComposeAsync(message);
        }
    }
    
    private async Task OnMarkPlayerPayed(CellContext<BCAccount> args)
    {
        var account = args.Item;
        var form = await BCData.GetRegistrationByEmailAsync(account.Email);

        if (form is null) return;
        
        await BCData.SetUserAsPayedAsync(account.Email);

        var tournament = await BCData.GetCurrentTournamentAsync();
        if (tournament is not null)
        {
            await BCData.ConfigPlayerProfileAsync(form, tournament.tournament_id);
        }
        
        await LoadDataAsync();
        InvokeAsync(StateHasChanged);
    }

    private Func<BCAccount, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;        
        
        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}