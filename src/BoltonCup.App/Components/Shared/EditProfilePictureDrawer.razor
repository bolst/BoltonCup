@inject Supabase.Client SupabaseClient
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject IBCData BCData

<MudDrawer @bind-Open="@DrawerOpen" Width="100%" Anchor="Anchor.End" Variant="DrawerVariant.Temporary" Color="Color.Primary">
    @if (loading)
    {
        <div class="px-4 mt-20">
            <MudStack AlignItems="AlignItems.Center">
                <MudProgressCircular Size="Size.Large" Indeterminate />
            </MudStack>
        </div>
    }
    else
    {
        <MudDrawerHeader>
            <MudGrid Class="mt-8">
                <MudItem Class="d-flex align-center" xs="2">
                    <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.ArrowBackIosNew" OnClick="@(() => DrawerOpen = false)" Size="Size.Small" />
                </MudItem>
                <MudItem Class="d-flex align-center justify-center" xs="8">
                    <MudText Typo="Typo.subtitle1"><b>Edit Profile Picture</b></MudText>
                </MudItem>
                <MudItem xs="2">
                    &nbsp;
                </MudItem>
            </MudGrid>
        </MudDrawerHeader>
        <div class="px-4">

            <MudStack AlignItems="AlignItems.Center">
                <MudAvatar Style="height: 100px; width: 100px;">
                    <MudImage Src="@ImageSrc" ObjectFit="ObjectFit.Cover" />
                </MudAvatar>
            </MudStack>

            <MudStack Class="mt-10" AlignItems="AlignItems.Start">
                <MudButton StartIcon="@Icons.Material.Filled.PhotoLibrary" Color="Color.Inherit" OnClick="OnUploadFromLibrary">Choose from library</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.PhotoCamera" Color="Color.Inherit" OnClick="OnTakePhoto">Take Photo</MudButton>
            </MudStack>

        </div>
    }
</MudDrawer>

@code{

    [Parameter]
    public bool Open { get; set; }
    
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter] 
    public string ImageSrc { get; set; } = string.Empty;

    [Parameter] 
    public EventCallback<byte[]> OnImageUpload { get; set; }

    private bool _loading = false;

    private bool loading
    {
        get => _loading;
        set
        {
            if (value != _loading)
            {
                _loading = value;
                StateHasChanged();
            }
        }
    }
    
    private bool DrawerOpen
    {
        get => Open;
        set
        {
            Open = value;
            OpenChanged.InvokeAsync(value);
        }
    }

    private string localFilePath = "";
    private async Task OnUploadFromLibrary()
    {
        // note that this only works on physical devices (not the simulator)
        var photo = await MediaPicker.Default.PickPhotoAsync(new MediaPickerOptions
        {
            Title = "Select your photo"
        });

        await UpdateProfilePicAsync(photo);
    }

    private async Task OnTakePhoto()
    {
        // note that this only works on physical devices (not the simulator)
        var photo = await MediaPicker.Default.CapturePhotoAsync();

        await UpdateProfilePicAsync(photo);
    }

    private async Task UpdateProfilePicAsync(FileResult? photo)
    {
        if (photo is null) return;
        
        localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);
        await using Stream sourceStream = await photo.OpenReadAsync();
        await using FileStream localFileStream = File.OpenWrite(localFilePath);
        await sourceStream.CopyToAsync(localFileStream);

        sourceStream.Dispose();
        localFileStream.Dispose();
        var imageBytes = File.ReadAllBytes(localFilePath);
        ImageSrc = $"data:image/*;base64,{Convert.ToBase64String(imageBytes)}";

        loading = true;
        await OnImageUpload.InvokeAsync(imageBytes);
        loading = false;
        
        StateHasChanged();
    }

}