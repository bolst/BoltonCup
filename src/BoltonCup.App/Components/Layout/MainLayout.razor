@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="this">
    <MudLayout>
        <MudAppBar ToolBarClass="d-flex justify-space-between mt-4 pt-10" Fixed>
            <AuthorizeView>
                <Authorized>
                    @if (profileLayout)
                    {
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="@(() => settingsDrawerOpen = true)" />
                    }
                    else
                    {
                        <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Person" ClickPropagation="false" OnClick="@(() => profileDrawerOpen = true)" />
                    }
                </Authorized>
                <NotAuthorized>
                    <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.Login" ClickPropagation="false" Href="/login" />
                </NotAuthorized>
            </AuthorizeView>

        </MudAppBar>
        
        <AuthorizeView>
            <ProfileDrawer @bind-Open="profileDrawerOpen" />
            <SettingsDrawer @bind-Open="settingsDrawerOpen" />
        </AuthorizeView>
        
        <MudMainContent Class="py-12" Style="height: 100vh;">
            <div class="py-4">&nbsp;</div>

            <CustomErrorBoundary>
                <div class="pa-4">
                    @Body
                </div>
            </CustomErrorBoundary>
            
            <div class="py-14">&nbsp;</div>
        </MudMainContent>
        
        <BottomNavBar />
    </MudLayout>
</CascadingValue>

@code {
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool profileDrawerOpen;
    private bool settingsDrawerOpen;

    public bool profileLayout = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var layoutProperties = new LayoutProperties()
        {
            AppbarHeight = "100px"
        };
        _theme = new CustomThemeProvider(layoutProperties).Theme;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        StateHasChanged();
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

}