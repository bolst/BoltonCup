@inherits HubComponentBase

@inject Data.DraftServiceProvider Drafter


@if (_currentPick is not null && _teamWithCurrentPick is not null)
{
    <div class="d-flex align-center flex-row gap-2">
        @if (_draft is not null && _draft.State.EqualsEnum(DraftState.Live))
        {
            <MudChip T="string" Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Circle" Size="Size.Small">LIVE</MudChip>
        }
        <MudText Typo="Typo.h6" Color="Color.Tertiary"><b>Round @_currentPick.round Pick @_currentPick.pick</b></MudText>
        <MudImage Src="@_teamWithCurrentPick.logo_url" Height="30"/>
    </div>
}


@code {
    
    private BCDraftPick? _currentPick;
    private BCTeam? _teamWithCurrentPick;
    private BCDraft? _draft;
    
    
    protected override async Task OnInitializedAsync()
    {
        _draft = await Drafter.GetDraftAsync();
        await LoadDataAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadDataAsync()
    {
        (_teamWithCurrentPick, _currentPick) = await Drafter.GetTeamWithCurrentPick();
    }

    
    protected override void AddHubHandlers()
    {
        Hub.On(DraftHub.Events.OnDraftUpdate, async () =>
        {
            await LoadDataAsync();
            InvokeAsync(StateHasChanged);
        });

        Hub.On(DraftHub.Events.OnDraftStateChange, async () =>
        {
            Drafter.InvalidateDraftCache();
            _draft = await Drafter.GetDraftAsync();
            InvokeAsync(StateHasChanged);
        });
    }
    
}