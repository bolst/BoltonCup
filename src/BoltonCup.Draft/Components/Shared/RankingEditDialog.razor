@inject Supabase.Client SBClient
@inject IBCData BCData
@inject ISnackbar Snackbar


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">My Rankings</MudText>
    </TitleContent>
    <DialogContent>
        <div class="relative">
            <MudTable T="DraftRanking" Items="_rankings.OrderBy(x => x.Position)" GroupBy="_groupDefinition" Dense>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-theme-dark" colspan="4">@context.Key</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd>@context.Rank</MudTd>
                    <MudTd>
                        <MudButtonGroup Color="Color.Secondary" Size="Size.Small">
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" OnClick="_ => SetAsBottomRank(context)"/>
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" OnClick="_ => DecrementRank(context)"/>
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" OnClick="_ => IncrementRank(context)"/>
                            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" OnClick="_ => SetAsTopRank(context)"/>
                        </MudButtonGroup>
                    </MudTd>
                    <MudTd><MudText Typo="Typo.body1"><b>@context.PlayerName</b></MudText></MudTd>
                    <MudTd>
                        @if (context.TeamId is null)
                        {
                            <MudChip T="string" Color="Color.Info" Variant="Variant.Filled" Label="true">Available</MudChip>
                        }
                        else
                        {
                            <MudStack AlignItems="AlignItems.Center" Spacing="1" Row>
                                <MudText Typo="Typo.caption">@context.TeamName</MudText>
                                <MudImage Src="@context.TeamLogo" Height="30"/>
                            </MudStack>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            
            <MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
                <MudProgressCircular Indeterminate/>
            </MudOverlay>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SaveChanges" Variant="Variant.Filled" Color="Color.Success" Disabled="_loading">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }

    private bool _loading;
    
    private BCAccount? _currentUser;
    private List<DraftRanking> _rankings = [];

    private BCTournament? _currentTournament;
    
    private TableGroupDefinition<DraftRanking> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Position,
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        var user = SBClient.Auth.CurrentUser;
        if (user?.Email is not null)
        {
            _currentUser = await BCData.GetAccountByEmailAsync(user.Email);
        }

        if (_currentUser is null)
        {
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }

        _currentTournament = await BCData.GetCurrentTournamentAsync();
        if (_currentTournament is null)
        {
            MudDialog.Close(DialogResult.Ok(true));
            return;
        }

        _rankings = (await BCData.GetDraftRankingsAsync(_currentTournament.tournament_id, _currentUser.id)).ToList();
        await InvokeAsync(StateHasChanged);
    }
    
    
    
    private void DecrementRank(DraftRanking ranking)
    {
        var i = _rankings.IndexOf(ranking);

        if (i < 0 || i + 1 == _rankings.Count || _rankings[i + 1].Position != ranking.Position) return;

        var oldRank = _rankings[i].Rank;
        var swapOldRank = _rankings[i + 1].Rank;
        
        (_rankings[i], _rankings[i + 1]) = (_rankings[i + 1], _rankings[i]);
        (_rankings[i].Rank, _rankings[i + 1].Rank) = (oldRank, swapOldRank);
    }    
    
    private void SetAsBottomRank(DraftRanking ranking)
    {
        var bottom = _rankings
            .Where(x => x.Position == ranking.Position)
            .Max(x => x.Rank);
        
        // delete passed in rank from list
        _rankings.RemoveAt(_rankings.IndexOf(ranking));

        // decrement lower ranks
        _rankings = _rankings
            .Select(x =>
            {
                if (x.Rank > ranking.Rank && x.Position == ranking.Position)
                    x.Rank--;
                return x;
            })
            .ToList();
        
        // set passed in rank to bottom
        ranking.Rank = bottom;
        
        // add passed in rank to list
        _rankings = _rankings.Append(ranking).ToList();
    }
    
    
    private void IncrementRank(DraftRanking ranking)
    {
        var i = _rankings.IndexOf(ranking);

        if (i <= 0 || _rankings[i - 1].Position != ranking.Position) return;

        var oldRank = _rankings[i].Rank;
        var swapOldRank = _rankings[i - 1].Rank;
        
        (_rankings[i], _rankings[i - 1]) = (_rankings[i - 1], _rankings[i]);
        (_rankings[i].Rank, _rankings[i - 1].Rank) = (oldRank, swapOldRank);
    }
    
    private void SetAsTopRank(DraftRanking ranking)
    {
        // delete passed in rank from list
        _rankings.RemoveAt(_rankings.IndexOf(ranking));

        // increment higher ranks
        _rankings = _rankings
            .Select(x =>
            {
                if (x.Rank < ranking.Rank && x.Position == ranking.Position)
                    x.Rank++;
                return x;
            })
            .ToList();
        
        // set passed in rank to 1
        ranking.Rank = 1;
        
        // add passed in rank to list
        _rankings = _rankings.Prepend(ranking).ToList();
    }
    
    
    
    private void Discard() => MudDialog.Close();

    private async Task SaveChanges()
    {
        if (_currentTournament is null || _currentUser is null)
        {
            MudDialog.Close();
            return;
        }

        _loading = true;
        await InvokeAsync(StateHasChanged);

        await BCData.UpdateDraftRankingAsync(_currentTournament.tournament_id, _currentUser.id, _rankings);

        _loading = false;
        await InvokeAsync(StateHasChanged);
        
        Snackbar.Add("Success!", Severity.Success);
        MudDialog.Close();
    }
}