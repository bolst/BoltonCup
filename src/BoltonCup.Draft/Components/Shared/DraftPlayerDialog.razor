@inject Data.DraftServiceProvider Drafter
@inject IBCData BCData


<MudDialog>
    <TitleContent>
        <MudStack AlignItems="AlignItems.Center" Row>
            <MudText Typo="Typo.h5">@Player.name (@Player.dob.ToString("yyyy"))</MudText>
            <PositionChip Position="@Player.position" />
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="8" Row>
            <div>
                <MudImage Src="@Player.ProfilePicture" Width="300"/>
            </div>
            <div>
                <MudText Class="my-4" Typo="Typo.h6">Highest Level - @Player.HighestLevel</MudText>

                <MudText Class="my-4" Typo="Typo.h6">Availability</MudText>
                <MudStack Style="max-width: 450px" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="0" Row>
                    @if (Player.Availabilities.Any(a => a.Value != "null"))
                    {
                        foreach (var availability in Player.Availabilities.Where(a => a.Value != "null"))
                        {
                            var isIn = availability.Value == "in";
                            <MudChip T="string" Color="Color.Surface" Icon="@(isIn ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" IconColor="@(isIn ? Color.Success : Color.Error)" Variant="Variant.Filled" Size="Size.Small">@availability.Key.ToString("ddd. h:mm")</MudChip>
                        }
                    }
                    else
                    {
                        <MudText>Not set</MudText>
                    }
                </MudStack>
                
                
                @if (_preferredTeammate1 is not null || _preferredTeammate2 is not null)
                {
                    <MudText Typo="Typo.h6">Preferred Teammates</MudText>
                    <MudStack Class="mx-6" Spacing="1">
                        @if (_preferredTeammate1 is not null)
                        {
                            <MudStack AlignItems="AlignItems.Center" Row>
                                <MudText>@_preferredTeammate1.name</MudText>
                                @AvailabilityChip(_preferredTeammate1)
                            </MudStack>
                        }
                        @if (_preferredTeammate2 is not null)
                        {
                            <MudStack AlignItems="AlignItems.Center" Row>
                                <MudText>@_preferredTeammate2.name</MudText>
                                @AvailabilityChip(_preferredTeammate2)
                            </MudStack>
                        }
                    </MudStack>
                }
            </div>

        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton
            Class="mud-theme-dark"
            Variant="Variant.Filled"
            OnClick="OnDraftPlayer">
            Draft
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter, EditorRequired]
    public required PlayerProfile Player { get; set; }

    private BCAccount? _account;

    private PlayerProfile? _preferredTeammate1;
    private PlayerProfile? _preferredTeammate2;
    
    protected override async Task OnParametersSetAsync()
    {
        if (Player.account_id.HasValue)
        {
            _account = await BCData.GetAccountByIdAsync(Player.account_id.Value);
            var tournament = await BCData.GetCurrentTournamentAsync();

            if (tournament is null) return;
            
            if (_account?.preferred_teammate1 is not null)
                _preferredTeammate1 = await BCData.GetUserTournamentPlayerProfileAsync(_account.preferred_teammate1.Value, tournament.tournament_id);
            if (_account?.preferred_teammate2 is not null)
                _preferredTeammate2 = await BCData.GetUserTournamentPlayerProfileAsync(_account.preferred_teammate2.Value, tournament.tournament_id);
        }
    }
    
    private async Task OnDraftPlayer()
    {
        // await Drafter.DraftPlayerAsync(Player);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task OnCancel() => MudDialog.Cancel();


    private RenderFragment AvailabilityChip(PlayerProfile player)
    {
        if (player.team_id is null)
        {
            return @<MudChip T="string" Color="Color.Primary" Variant="Variant.Text">Available</MudChip>;
        }
        else
        {
            return @<MudChip T="string" Color="Color.Error" Variant="Variant.Text">Drafted</MudChip>;
        }
    }
    
}