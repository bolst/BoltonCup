@inject NavigationManager Navigation
@inject Data.IBCData BCData

@if (goalieGameByGame is not null)
{
    <MudPaper Class="pa-2 ml-4" Elevation="3">
        <MudStack AlignItems="AlignItems.Center" Row>
            <MudSelect @bind-Value="_selectedTournament" Underline="false">
                @foreach (var tournament in _tournaments)
                {
                    <MudSelectItem Value="@tournament" >
                        @if (tournament?.start_date is not null)
                        {
                            <MudText Class="mx-2" Typo="Typo.body1">
                                @tournament.start_date.Value.ToString("yyyy")
                            </MudText>
                        }
                    </MudSelectItem>
                }
            </MudSelect>
            
            <MudDivider Vertical="true" FlexItem="true"/>

            @StatColumnRF("GP", GamesPlayed)
            @StatColumnRF("GAA", GAA)
            @StatColumnRF("SO", Shutouts)
        </MudStack>
</MudPaper>
}

@code {
    [Parameter] 
    public int AccountId { get; set; }
    
    private Data.BCTournament? selectedTournament;
    private Data.BCTournament? _selectedTournament
    {
        get => selectedTournament;
        set
        {
            if (selectedTournament == value) return;

            selectedTournament = value;
            InvokeAsync(LoadDataAsync);
        }
    }
    
    private IEnumerable<BCTournament> _tournaments = [];
    private IEnumerable<Data.GoalieGameSummary>? goalieGameByGame;

    private int GamesPlayed => goalieGameByGame is not null && goalieGameByGame.Any() ? goalieGameByGame.Count() : 0;
    private double GAA => goalieGameByGame is not null && goalieGameByGame.Any() ? goalieGameByGame.Average(x => x.opponent_team_score ?? 0) : 0;
    private int Shutouts => goalieGameByGame is not null && goalieGameByGame.Any() ? goalieGameByGame.Where(x => x.opponent_team_score == 0).Sum(x => 1) : 0;
    
    private RenderFragment StatColumnRF(string title, double value) => __builder =>
    {
        <MudStack Class="px-2 px-sm-10 d-flex justify-center">
            <MudText Class="d-flex justify-center" Typo="Typo.subtitle2">@title</MudText>
            <MudText Class="d-flex justify-center" Typo="Typo.h4">@value</MudText>
        </MudStack>
    };

    
    protected override async Task OnInitializedAsync()
    {
        _tournaments = await BCData.GetTournamentsAsync();
        _selectedTournament = await BCData.GetCurrentTournamentAsync();

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (_selectedTournament is null) return;
        
        goalieGameByGame = await BCData.GetGoalieGameByGame(AccountId, _selectedTournament.tournament_id);
     
        InvokeAsync(StateHasChanged);
    }
}