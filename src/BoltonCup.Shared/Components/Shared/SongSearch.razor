@using SpotifyAPI.Web

@inject SpotifyService SpotifyService


@if (_loading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="5vh" Width="50vw" />
}
else
{
    <MudAutocomplete T="FullTrack" @bind-Value="_selectedTrack" ToStringFunc="ToStringFunc" SearchFunc="OnSearchSong" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter" Margin="Margin.Dense" Label="Search songs, artists..." Strict="false" DebounceInterval="500" OnlyValidateIfDirty Dense>
        <ItemTemplate Context="context">
            <MudStack AlignItems="AlignItems.Center" Row>
                            
                <MudImage Src="@context.Album.Images.FirstOrDefault()?.Url" Height="50" />
                            
                <div>
                    <MudText><b>@context.Name</b></MudText>
                    <MudText Typo="Typo.caption">@String.Join(", ", context.Artists.Select(x => x.Name))</MudText>
                </div>
            </MudStack>
        </ItemTemplate>
        <ProgressIndicatorInPopoverTemplate>
            <MudList T="string" ReadOnly>
                <MudListItem>
                    ...
                </MudListItem>
            </MudList>
        </ProgressIndicatorInPopoverTemplate>
    </MudAutocomplete>
}


@code {

    [Parameter] 
    public FullTrack? SelectedTrack { get; set; }
    
    [Parameter]
    public EventCallback<FullTrack?> SelectedTrackChanged { get; set; }

    [Parameter] 
    public string InitialSongName { get; set; } = string.Empty;

    private string _initialSongName = string.Empty;

    private string _songQuery = string.Empty;
    private IEnumerable<FullTrack> _tracks = [];

    private bool _loading;

    private FullTrack? _selectedTrack
    {
        get => SelectedTrack;
        set
        {
            SelectedTrack = value;
            SelectedTrackChanged.InvokeAsync(value);
        }
    }



    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(_initialSongName) && !string.IsNullOrEmpty(InitialSongName))
        {
            _initialSongName = InitialSongName;
            
            if (!string.IsNullOrEmpty(InitialSongName))
            {
                _loading = true;
                StateHasChanged();
                
                var tracks = await SpotifyService.SearchSongs(InitialSongName);
                if (tracks?.Tracks?.Items is not null && tracks.Tracks.Items.Any())
                    _selectedTrack = tracks.Tracks.Items.First();

                _loading = false;
                StateHasChanged();
            }
        }
    }
    
    
    private async Task<IEnumerable<FullTrack>> OnSearchSong(string query, CancellationToken cancellationToken)
    {
        if (query == _songQuery)
        {
            return _tracks;
        }


        if (string.IsNullOrWhiteSpace(query))
        {
            _tracks = [];
        }
        else
        {
            var response = await SpotifyService.SearchSongs(query, cancellationToken: cancellationToken);
            if (response.Tracks.Items is null || !response.Tracks.Items.Any())
            {
                _tracks = [];
            }
            else
            {
                _tracks = response.Tracks.Items.Distinct();
                _songQuery = query;
            }
        }

        return _tracks;
    }

    private string ToStringFunc(FullTrack? track)
    {
        if (track?.Artists is null)
            return track?.Name ?? string.Empty;

        return $"{track.Name} ({string.Join(", ", track.Artists is null ? [] : track.Artists.Select(x => x.Name))})";
    }
    
}