@page "/pay"

@inject NavigationManager Navigation
@inject Data.StripeServiceProvider StripeService

<PageHeader>@_headerText</PageHeader>

<MudPaper Class="pa-3 mx-4 my-4 mx-sm-20 d-flex justify-center align-center" Height="50vh">
    @if (_loading)
    {
        <MudProgressCircular Size="Size.Large" Indeterminate />
    }
    else
    {
        <MudStack AlignItems="AlignItems.Center" Spacing="5" Style="min-width: 80%">
            @* @if (_userData is null) *@
            @* { *@
            @*     <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Style="font-size: 8rem"/> *@
            @*     <MudDivider/> *@
            @* *@
            @*     <MudText Typo="Typo.body1">Something went wrong! Reach out to <b>nicbolton17@icloud.com</b> for further assistance.</MudText> *@
            @* } *@
            <MudIcon Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success" Style="font-size: 8rem"/>
            <MudDivider/>

            <MudText Typo="Typo.body1">Payment has been confirmed!</MudText>
        </MudStack>
    }
</MudPaper>
    
@code{

    [SupplyParameterFromQuery] 
    public string? CheckoutId { get; set; }

    private string _headerText = "Confirming Payment";
    private bool _loading = true;
    
    private RegisterFormModel? _userData;

    protected override async Task OnParametersSetAsync()
    {
        _headerText = "Confirming Payment";
        _loading = true;
        StateHasChanged();

        if (string.IsNullOrEmpty(CheckoutId))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await Task.Delay(1000);
        _userData = await StripeService.ProcessCheckoutAsync(CheckoutId);

        _loading = false;
        _headerText = "Payment Confirmed";
        StateHasChanged();
    }
    
}