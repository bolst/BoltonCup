@page "/config"

@inject NavigationManager Navigation
@inject IBCData BCData
@inject SupabaseServiceProvider SBService
@inject ISnackbar Snackbar

<PageHeader Title="Profile" Height="15vh">Edit Profile</PageHeader>

@if (_account is not null)
{
    <div class="relative">
        
        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Row>
            <MudText Typo="Typo.h6">Profile Picture</MudText>
            
            <MudFileUpload T="IBrowserFile" FilesChanged="OnChangeProfilePic" Accept=".png, .jpg">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.UploadFile" Color="Color.Primary" Size="Size.Large" />
                </ActivatorContent>
            </MudFileUpload>
            
            <MudSpacer />
            
            <MudImage Src="@_account.ProfilePicture" Height="120" />
        </MudStack>
        
        <MudDivider />
        
        
        
        <MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
            <MudProgressCircular Size="Size.Large" Indeterminate />
        </MudOverlay>    
    </div>
}

@code {

    // 31d82357-9f1d-451a-9d3f-3882b8e17cc6
    [SupplyParameterFromQuery] 
    public string PCK { get; set; } = string.Empty;

    private Guid _pcKey = Guid.Empty;

    private bool _loading;

    private BCAccount? _account;
    private PlayerProfile? _profile;
    

    protected override async Task OnParametersSetAsync()
    {
        var valid = Guid.TryParse(PCK, out var parsedKey);
        
        if (string.IsNullOrEmpty(PCK) || PCK.Length != 36 || !valid)
        {
            Navigation.NavigateTo("/");
            return;
        }

        if (parsedKey != _pcKey)
        {
            _pcKey = parsedKey;
            _account = await BCData.GetAccountByPCKeyAsync(_pcKey);
            _profile = await BCData.GetCurrentPlayerProfileByPCKeyAsync(_pcKey);

            if (_account is null)
            {
                Navigation.NavigateTo("/");
                return;
            }
        }
    }


    private async Task OnChangeProfilePic(IBrowserFile? file)
    {
        if (_account is null || file is null || !file.ContentType.StartsWith("image/")) return;

        _loading = true;
        InvokeAsync(StateHasChanged);
        
        byte[] bytes;

        var skEm = string.Empty;
        
        // try to rescale image
        try
        {
            var resizer = new SkiaSharpImageResizer();
            const int maxUploadSizeKB = 5 * 1024 * 1024; // 5 MB
            bytes = await resizer.ApproxResizeImageAsync(file.OpenReadStream(maxUploadSizeKB), 800);
        }
        catch
        {
            skEm = "(NSK)";
            
            var path = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());

            await using var fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(file.Size).CopyToAsync(fs);
            bytes = new byte[file.Size];

            fs.Position = 0;
            _ = await fs.ReadAsync(bytes);
            fs.Close();

            File.Delete(path);
        }

        var extension = Path.GetExtension(file.Name).ToLower();
        var message = await SBService.UpdateProfilePictureAsync(_account.Email, bytes, extension);

        if (message is null)
        {
            _account.ProfilePicture = $"data:image/*;base64,{Convert.ToBase64String(bytes)}";
            Snackbar.Add("Success! Your profile picture is being updated.", Severity.Success);
        }
        else if (message == ProfilePicUploadErrorType.FileTooLarge)
        {
            Snackbar.Add($"That image was too large :( try a different one {skEm}.", Severity.Error);
        }
        else
        {
            Snackbar.Add($"That image didn't work :( try a different one {skEm}.", Severity.Error);
        }
        
        _loading = false;
        InvokeAsync(StateHasChanged);
    }

}