@page "/config"

@using SpotifyAPI.Web

@inject NavigationManager Navigation
@inject IBCData BCData
@inject SupabaseServiceProvider SBService
@inject ISnackbar Snackbar

<PageHeader Title="Profile" Height="15vh">Edit Profile</PageHeader>

@if (_account is not null)
{
    if (!string.IsNullOrEmpty(_account.Message))
    {
        <MudAlert Severity="_account.Editable ? Severity.Info : Severity.Error">@_account.Message</MudAlert>
    }

    <div class="relative">

        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Row>
            <MudText Typo="Typo.h6">Profile Picture</MudText>

            <MudFileUpload T="IBrowserFile" FilesChanged="OnChangeProfilePic" Accept=".png, .jpg"
                           Disabled="!_account.Editable">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.UploadFile" Color="Color.Primary" Size="Size.Large"/>
                </ActivatorContent>
            </MudFileUpload>

            <MudSpacer/>

            <MudImage Src="@_account.ProfilePicture" Height="120"/>
        </MudStack>

        <MudDivider/>

        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="1" Row>
            <MudText Typo="Typo.h6">Preferred Jersey #'s</MudText>

            @SaveButton

            <MudFlexBreak/>

            <MudStack AlignItems="AlignItems.Center" Row>
                <MudNumericField @bind-Value="_account.preferred_number1" Label="First" Min="1" Max="99"
                                 Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons/>
                <MudNumericField @bind-Value="_account.preferred_number2" Label="Second" Min="1" Max="99"
                                 Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons/>
                <MudNumericField @bind-Value="_account.preferred_number3" Label="Third" Min="1" Max="99"
                                 Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons/>
            </MudStack>

        </MudStack>

        <MudDivider/>

        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="1" Row>
            <MudText Typo="Typo.h6">Preferred Beer</MudText>

            @SaveButton

            <MudFlexBreak/>

            <MudStack AlignItems="AlignItems.Center" Row>
                <MudTextField @bind-Value="_account.preferred_beer" Label="Beer" Variant="Variant.Outlined"
                              Margin="Margin.Dense" MaxLength="20"/>
            </MudStack>

        </MudStack>

        <MudDivider/>

        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="1" Row>
            <MudText Typo="Typo.h6">Game Availability</MudText>

            @SaveButton

            <MudFlexBreak/>

            <MudText Typo="Typo.caption">This will be used for the draft and to get subs.</MudText>

            <MudFlexBreak/>

            @foreach (var availability in _availabilities)
            {
                <MudStack AlignItems="AlignItems.Center" Spacing="3" Row>
                    <MudSelect Style="width: 7rem" T="string" @bind-Value="availability.Availability"
                               Variant="Variant.Outlined" Margin="Margin.Dense" Dense>
                        <MudSelectItem Value="@("in")">In</MudSelectItem>
                        <MudSelectItem Value="@("out")">Out</MudSelectItem>
                        <MudSelectItem Value="@("unsure")">Unsure</MudSelectItem>
                    </MudSelect>

                    <MudText>@availability.GameDate.ToString("ddd. MMMM dd/yy h:mmtt").Replace("-", "/")</MudText>

                    @if (availability.GameType == GameType.RoundRobin)
                    {
                        <MudText>vs.</MudText>
                    }
                    else
                    {
                        <GameTypeChip Type="@availability.GameType"/>
                    }
                    <MudLink Href="@($"team/{availability.OpponentId}")">
                        <MudImage Height="50" Src="@availability.OpponentLogo"/>
                    </MudLink>
                </MudStack>

                <MudFlexBreak/>
            }

        </MudStack>

        <MudDivider />

        <MudStack Class="pa-4" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="1" Row>
            <MudText Typo="Typo.h6">Song Request</MudText>

            @SaveButton

            <MudFlexBreak/>

            <MudText Typo="Typo.caption">To help make a playlist for games.</MudText>

            <MudFlexBreak/>

            <SongSearch @bind-SelectedTrack="_selectedTrack" InitialSongName="@_account.SongRequest" />

        </MudStack>


        <MudDivider/>


        <div style="height: 80vh">&nbsp;</div>


        <MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
            <MudProgressCircular Size="Size.Large" Indeterminate/>
        </MudOverlay>
    </div>
}

@code {

    // 31d82357-9f1d-451a-9d3f-3882b8e17cc6
    [SupplyParameterFromQuery] 
    public string PCK { get; set; } = string.Empty;

    private Guid _pcKey = Guid.Empty;

    private bool _loading;

    private BCAccount? _account;
    private PlayerProfile? _profile;
    private IEnumerable<BCAvailability> _availabilities = [];

    private FullTrack? selectedTrack;
    private FullTrack? _selectedTrack
    {
        get => selectedTrack;
        set
        {
            selectedTrack = value;
            if (_account is not null && value is not null)
            {
                _account.SongRequest = $"{value?.Name} ({string.Join(", ", value.Artists.Select(x => x.Name))})";
                _account.SongRequestId = value.Id;
            }
        }
    }
    
    
    
    protected override async Task OnParametersSetAsync()
    {
        var valid = Guid.TryParse(PCK, out var parsedKey);

        if (string.IsNullOrEmpty(PCK) || PCK.Length != 36 || !valid)
        {
            Navigation.NavigateTo("/");
            return;
        }

        if (parsedKey != _pcKey)
        {
            _pcKey = parsedKey;
            _account = await BCData.GetAccountByPCKeyAsync(_pcKey);
            _profile = await BCData.GetCurrentPlayerProfileByPCKeyAsync(_pcKey);

            if (_account is null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            await BCData.PopulatePlayerAvailabilitiesAsync(_account.id);
            _availabilities = await BCData.GetPlayerAvailabilityAsync(_account.id, _profile.tournament_id);
        }
    }
    

    private async Task OnSave()
    {
        if (_account is null) return;

        _loading = true;
        InvokeAsync(StateHasChanged);

        await BCData.UpdateConfigDataAsync(_account);
        await BCData.UpdatePlayerAvailabilityAsync(_availabilities);

        _loading = false;
        InvokeAsync(StateHasChanged);

        Snackbar.Add("Success!", Severity.Success);
    }


    private async Task OnChangeProfilePic(IBrowserFile? file)
    {
        if (_account is null || file is null || !file.ContentType.StartsWith("image/")) return;

        _loading = true;
        InvokeAsync(StateHasChanged);

        byte[] bytes;

        var skEm = string.Empty;

        // try to rescale image
        try
        {
            var resizer = new SkiaSharpImageResizer();
            const int maxUploadSizeKB = 5 * 1024 * 1024; // 5 MB
            bytes = await resizer.ApproxResizeImageAsync(file.OpenReadStream(maxUploadSizeKB), 800);
        }
        catch
        {
            skEm = "(NSK)";

            var path = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());

            await using var fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(file.Size).CopyToAsync(fs);
            bytes = new byte[file.Size];

            fs.Position = 0;
            _ = await fs.ReadAsync(bytes);
            fs.Close();

            File.Delete(path);
        }

        var extension = Path.GetExtension(file.Name).ToLower();
        var message = await SBService.UpdateProfilePictureAsync(_account.Email, bytes, extension);

        if (message is null)
        {
            _account.ProfilePicture = $"data:image/*;base64,{Convert.ToBase64String(bytes)}";
            Snackbar.Add("Success! Your profile picture is being updated.", Severity.Success);
        }
        else if (message == ProfilePicUploadErrorType.FileTooLarge)
        {
            Snackbar.Add($"That image was too large :( try a different one {skEm}.", Severity.Error);
        }
        else
        {
            Snackbar.Add($"That image didn't work :( try a different one {skEm}.", Severity.Error);
        }

        _loading = false;
        InvokeAsync(StateHasChanged);
    }


    private RenderFragment SaveButton => @<MudButton OnClick="OnSave" Disabled="!_account.Editable" Class="ml-2"
                                                     Color="Color.Primary" Variant="Variant.Filled"
                                                     EndIcon="@Icons.Material.Filled.CloudUpload" Size="Size.Small">Save
    </MudButton>;


}