@inject IBCData BCData


@if (_confirmed)
{
    <MudButtonGroup OverrideStyles="false">
        <MudButton OnClick="ShowDialog" Color="Color.Success" Variant="Variant.Filled">Confirm</MudButton>
        <MudButton OnClick="(() => _confirmed = false)" Color="Color.Error" Variant="Variant.Filled">Discard</MudButton>
    </MudButtonGroup>
}
else
{
    <MudButton 
        OnClick="(() => _confirmed = true)" 
        Disabled="ReadOnly" 
        StartIcon="@Icons.Material.Filled.Add" 
        Variant="Variant.Filled" 
        Color="Color.Primary">Add Goal</MudButton>
}

<MudDialog @bind-Visible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudStack AlignItems="AlignItems.Center" Row>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.SportsHockey" Class="mr-3 mb-n1"/>
                Add Goal
            </MudText>
            <MudImage Src="@Team.logo_url" Height="50"/>
        </MudStack>
    </TitleContent>
    <DialogContent>
        @if (!string.IsNullOrEmpty(_alertMessage))
        {
            <MudAlert Severity="_alertSeverity" Dense>@_alertMessage</MudAlert>
        }
        @if (WithGoalHorn && _goalHornPlaying)
        {
            <div style="width: 100%">
                <audio autoplay controls style="width: 100%"><source src="@Team.goal_horn_url" /></audio>
            </div>
        }
        
        <MudForm @ref="_form">
            <MudSelect Class="my-1" @bind-Value="_scorer" Label="Scorer" Margin="Margin.Dense" Variant="Variant.Outlined" AutoFocus Clearable Dense Required>
                @foreach (var player in Players.Where(p => p.id != _assist1?.id && p.id != _assist2?.id))
                {
                    <MudSelectItem Value="player">#@player.jersey_number @player.name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect Class="my-1" @bind-Value="_assist1" Label="Primary Assist" Margin="Margin.Dense" Variant="Variant.Outlined" Dense Clearable>
                @foreach (var player in Players.Where(p => p.id != _scorer?.id && p.id != _assist2?.id))
                {
                    <MudSelectItem Value="player">#@player.jersey_number @player.name</MudSelectItem>
                }
            </MudSelect>

            <MudSelect Class="my-1" @bind-Value="_assist2" Label="Secondary Assist" Margin="Margin.Dense" Variant="Variant.Outlined" Dense Clearable>
                @foreach (var player in Players.Where(p => p.id != _scorer?.id && p.id != _assist1?.id))
                {
                    <MudSelectItem Value="player">#@player.jersey_number @player.name</MudSelectItem>
                }
            </MudSelect>
            
            
            <MudText Class="mt-2" Typo="Typo.caption">Period</MudText>
            <MudToggleGroup T="int" Class="mb-1" @bind-Value="_period" Color="Color.Primary">
                <MudToggleItem Value="1">1</MudToggleItem>
                <MudToggleItem Value="2">2</MudToggleItem>
                <MudToggleItem Value="3">3</MudToggleItem>
            </MudToggleGroup>


            <MudText Class="mt-2" Typo="Typo.caption">Time</MudText>
            <MudStack Class="mb-1" AlignItems="AlignItems.Center" Row>
                <MudSelect @bind-Value="_minutes" Label="Minutes" Margin="Margin.Dense" Variant="Variant.Outlined" Dense Required>
                    @foreach (var minute in Enumerable.Range(0, 11))
                    {
                        <MudSelectItem Value="minute">@minute</MudSelectItem>
                    }
                </MudSelect>                
                <MudSelect @bind-Value="_seconds" Label="Seconds" Margin="Margin.Dense" Variant="Variant.Outlined" Dense Required>
                    @foreach (var second in Enumerable.Range(0, 60))
                    {
                        <MudSelectItem Value="second">@second</MudSelectItem>
                    }
                </MudSelect>
                
                <MudText>@($"{_time.Minutes}:{_time.Seconds:00}")</MudText>
            </MudStack>
            
        </MudForm>
    </DialogContent>
    <DialogActions>
        <ConfirmButton OnClick="AddGoal" Variant="Variant.Filled" Color="Color.Primary">Add Goal</ConfirmButton>
        <MudButton OnClick="() => _visible = false">Cancel</MudButton>
    </DialogActions>
</MudDialog>
    
@code{
    
    [Parameter, EditorRequired]
    public required BCGame Game { get; set; }

    [Parameter, EditorRequired] 
    public required BCTeam Team { get; set; }

    [Parameter, EditorRequired] 
    public required IEnumerable<PlayerProfile> Players { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
    
    [Parameter]
    public EventCallback OnGoalAdded { get; set; }

    [Parameter] 
    public bool WithGoalHorn { get; set; } = true;

    private readonly DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Small,
        BackdropClick = false,
        CloseButton = false,
        CloseOnEscapeKey = false,
    };

    private MudForm _form;
    
    private PlayerProfile? _scorer;
    private PlayerProfile? _assist1;
    private PlayerProfile? _assist2;
    private int _period;
    private int _minutes
    {
        get => _time.Minutes;
        set => _time = new(0, value, _seconds);
    }    
    private int _seconds
    {
        get => _time.Seconds;
        set => _time = new(0, _minutes, value);
    }
    
    private TimeSpan _time = TimeSpan.Zero;

    private bool _visible;
    private bool _goalHornPlaying;
    
    
    private bool _confirmed;
    private string? _alertMessage;
    private Severity _alertSeverity = Severity.Normal;

    private async Task ShowDialog()
    {
        _scorer = null;
        _assist1 = null;
        _assist2 = null;
        _confirmed = false;
        _goalHornPlaying = false;
        _alertMessage = null;
        _alertSeverity = Severity.Normal;

        await PlayGoalHorn();
        
        _visible = true;
    }

    private async Task AddGoal()
    {
        await _form.Validate();
        if (_scorer is null) return;

        
        await AddGoalToDb();
        await OnGoalAdded.InvokeAsync();

        _visible = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task AddGoalToDb()
    {
        if (_scorer is null) return;

        var retval = new GoalEntry
        {
            Game = Game,
            Team = Team,
            Scorer = _scorer,
            Assist1 = _assist1,
            Assist2 = _assist2,
            Period = _period,
            Time = _time,
        };

        await BCData.AddGoalAsync(retval);
    }


    private async Task PlayGoalHorn()
    {
        if (!WithGoalHorn)
        {
            _alertMessage = "Play goal horn option disabled";
            _alertSeverity = Severity.Warning;
            return;
        }
        
        if (string.IsNullOrEmpty(Team.goal_horn_url))
        {
            _alertMessage = "Team has no goal horn";
            _alertSeverity = Severity.Error;
            return;
        }

        _goalHornPlaying = true;
    }
}