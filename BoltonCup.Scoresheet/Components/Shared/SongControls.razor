@using SpotifyAPI.Web

@inject SpotifyService Spotify
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IBCData BCData

@if (_loading)
{
    <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate />
}
else
{
    if (Authenticated)
    {
        <MudStack AlignItems="AlignItems.Center" Row>
            @if (_user!.DisplayName == "nicbolton")
            {
                <MudIconButton OnClick="ShowChoosePlaylistDialog" Icon="@Icons.Material.Filled.PlaylistAddCircle" Color="Color.Warning" />
            }
            
            @if (_queue is not null && _queue.Queue.Any())
            {
                <MudMenu Icon="@Icons.Material.Filled.QueueMusic" Color="Color.Info" Dense>
                    @foreach (var track in _queue.Queue.Take(8).Select(x => x as FullTrack))
                    {
                        if (track is null) continue;

                        <MudMenuItem Label="@track.Name">
                            <MudStack AlignItems="AlignItems.Center" Row>
                                <MudImage Src="@track.Album.Images.FirstOrDefault().Url" Height="30"/>
                                @if (track.Name.Length > 30)
                                {
                                    <MudText>@track.Name.Substring(0, 30) ...</MudText>
                                }
                                else
                                {
                                    <MudText>@track.Name</MudText>
                                }
                            </MudStack>
                        </MudMenuItem>
                    }
                </MudMenu>
            }

            @if (_currentTrack is not null)
            {
                var track = _currentTrack.Item as FullTrack;
                var trackName = track.Name.Length > 50 ? $"{track.Name.Substring(0, 50)}..." : track.Name;
                var artists = string.Join(", ", track.Artists.Select(x => x.Name));
                var artistNames = artists.Length > 50 ? $"{artists.Substring(0, 50)}..." : artists;

                <MudStack AlignItems="AlignItems.End" Spacing="0">
                    <MudText Typo="Typo.body2">@trackName</MudText>
                    <MudText Typo="Typo.caption" Style="font-size: 0.5rem">@artistNames</MudText>
                </MudStack>

                <MudImage Src="@track.Album.Images.FirstOrDefault().Url" Height="40"/>

                <MudButtonGroup OverrideStyles="false">
                    <MudIconButton OnClick="OnSkipBackward" Icon="@Icons.Material.Filled.SkipPrevious" Color="Color.Tertiary"/>

                    @if (_currentTrack.IsPlaying)
                    {
                        <MudIconButton OnClick="OnPause" Icon="@Icons.Material.Filled.PauseCircle" Color="Color.Tertiary"/>
                    }
                    else
                    {
                        <MudIconButton OnClick="OnPlay" Icon="@Icons.Material.Filled.PlayCircle" Color="Color.Tertiary"/>
                    }

                    <MudIconButton OnClick="OnSkipForward" Icon="@Icons.Material.Filled.SkipNext" Color="Color.Tertiary"/>
                </MudButtonGroup>
            }
            else
            {
                <MudIconButton OnClick="RefreshState" Color="Color.Error" Icon="@Icons.Material.Filled.Refresh"/>
            }

            <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Info" Dense>
                <MudMenuItem Icon="@Icons.Material.Filled.Person" Label="@_user.DisplayName"/>
                <MudMenuItem OnClick="Logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" Label="Logout"/>
            </MudMenu>

        </MudStack>
    }
    else
    {
        <MudButton OnClick="Login" StartIcon="@_spotifySvg" Variant="Variant.Filled" Color="Color.Success">Login</MudButton>
    }
}



@code {


    private bool _loading;
    private int _volume;
    private PrivateUser? _user;
    private CurrentlyPlayingContext? _currentTrack;
    private QueueResponse? _queue;
    

    private const string _spotifySvg = @"<svg role=""img"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg""><title>Spotify</title><path d=""M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z""/></svg>";

    private bool Authenticated => _user is not null;
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loading = true;
            StateHasChanged();

            await RefreshState();
            
            _loading = false;
            StateHasChanged();
            
        }
    }


    private async Task RefreshState()
    {
        var spotify = await Spotify.GetClientAsync();
        if (spotify is null) return;
        
        var request = new PlayerCurrentPlaybackRequest();
        _currentTrack = await spotify.Player.GetCurrentPlayback(request);

        _queue = await spotify.Player.GetQueue();

        _user = await spotify.UserProfile.Current();
        
        InvokeAsync(StateHasChanged);
    }
    

    private void Login()
    {
        var uri = Spotify.LoginRequestUri.ToString();
        
        Navigation.NavigateTo(uri);
    }


    private async Task Logout()
    {
        await Spotify.LogoutAsync();
        Navigation.NavigateTo(Navigation.Uri, true);
    }


    private async Task OnPause()
    {
        var spotify = await Spotify.GetClientAsync();
        if (spotify is null) return;
        
        var request = new PlayerPausePlaybackRequest();
        await spotify.Player.PausePlayback(request);
        
        await RefreshState();
    }
    
    
    private async Task OnPlay()
    {
        try
        {
            var spotify = await Spotify.GetClientAsync();
            if (spotify is null) return;
            
            var request = new PlayerResumePlaybackRequest();
            await spotify.Player.ResumePlayback(request);
        }
        catch (Exception e)
        {
            Console.WriteLine($"From OnPlay:\n{e.Message}");
        }

        await RefreshState();
    }


    private async Task OnSkipForward()
    {           
        var spotify = await Spotify.GetClientAsync();
        if (spotify is null) return;
        
        var request = new PlayerSkipNextRequest();
        await spotify.Player.SkipNext(request);
        
        await RefreshState();
    }



    private async Task OnSkipBackward()
    {
        var spotify = await Spotify.GetClientAsync();
        if (spotify is null) return;
        
        var request = new PlayerSkipPreviousRequest();
        await spotify.Player.SkipPrevious(request);
        
        await RefreshState();
    }


    private async Task ShowChoosePlaylistDialog()
    {
        var spotify = await Spotify.GetClientAsync();
        if (spotify is null) return;

        var playlists = await spotify.Playlists.CurrentUsers();

        var parameters = new DialogParameters<ChoosePlaylistDialog>
        {
            { x => x.Playlists, playlists.Items }
        };
        
        var dialog = await DialogService.ShowAsync<ChoosePlaylistDialog>("Choose Playlist", parameters);
        var result = await dialog.Result;

        if (result?.Data is FullPlaylist)
        {
            var playlist = result.Data as FullPlaylist;

            int offset = 0;
            IEnumerable<FullTrack> tracks = [];

            while (true)
            {
                var request = new PlaylistGetItemsRequest
                {
                    Offset = offset
                };
                offset += 100;

                var playlistTracks = await spotify.Playlists.GetItems(playlist.Id, request);

                var newTracks = playlistTracks.Items.Select(x => x.Track as FullTrack);
                if (!newTracks.Any()) break;
                
                tracks = tracks.Concat(newTracks);
            }
                
            await BCData.SetGeneralGameSongsAsync(tracks);
        }
    }
    
}