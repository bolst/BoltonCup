@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject IBCData BCData

<MudDrawer @bind-Open="@DrawerOpen" Class="pt-20 px-4" Elevation="1" Width="80%" OverlayAutoClose>
    @if (account is not null)
    {
        <AuthorizeView>
            <MudStack AlignItems="AlignItems.Start" Row>
                <MudAvatar Class="clickable" Style="height: 60px; width: 60px;">
                    <MudImage Src="@account.ProfilePicture" ObjectFit="ObjectFit.Cover" />
                </MudAvatar>

                <MudStack Spacing="0">
                    <MudText Typo="Typo.h6"><b>@account.FirstName @account.LastName</b></MudText>
                    <MudText Typo="Typo.caption">free agent</MudText>
                </MudStack>
            </MudStack>
        </AuthorizeView>
    }
    
    <MudNavMenu Class="mt-4">
        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person" Href="profile">Profile</MudNavLink>

        <AuthorizeView Roles="admin" Context="innerContext">
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AdminPanelSettings" Href="admin">Admits</MudNavLink>
        </AuthorizeView>
    </MudNavMenu>
</MudDrawer>

@code{
    
    [Parameter]
    public bool Open { get; set; }

    [Parameter] 
    public EventCallback<bool> OpenChanged { get; set; }

    private BCAccount? account;
    
    private bool DrawerOpen
    {
        get => Open;
        set
        {
            Open = value;
            OpenChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var state = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity is null || !state.User.Identity.IsAuthenticated || !state.User.HasClaim(x => x.Type == ClaimTypes.Email))
        {
            return;
        }
        var claim = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email);
        if (claim is null) return;
            
        account = await BCData.GetAccountByEmailAsync(claim.Value);
    }
    
    
}