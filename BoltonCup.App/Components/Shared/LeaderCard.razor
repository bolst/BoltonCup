@inject BoltonCup.Shared.Data.IBCData BCData
@inject NavigationManager Navigation

@if (selectedSkater is not null && selectedGoalie is not null)
{
    <MudPaper Class="pa-2 rounded-lg" Style="height: 100%;" Color="Color.Surface">
        <MudText Color="Color.Secondary"><b>@StatType</b></MudText>

        <MudGrid Class="pb-2">
            <MudItem xs="2">
                <MudAvatar Class="clickable" @onclick=@(() => Navigation.NavigateTo($"player/{(IsGoalie ? selectedGoalie.player_id : selectedSkater.player_id)}"))>
                    <MudImage Src="" />
                </MudAvatar>
            </MudItem>
            <MudItem xs="8">
                <MudText>@LeaderName</MudText>
                <MudText>@LeaderDetails</MudText>
            </MudItem>
            <MudItem xs="2">
                <MudStack AlignItems="AlignItems.End" Spacing="0">
                    <MudText Typo="Typo.h4"><b>@LeaderStatValue</b></MudText>
                    <MudText Typo="Typo.caption">@StatTypeAbbrev</MudText>
                </MudStack>
            </MudItem>
        </MudGrid>
        
        @if (IsGoalie)
        {
            int rank = 0;
            <MudStack Class="d-flex justify-center" Spacing="3">
                @foreach (var goalie in goalieStats!.Take(5))
                {
                    int playerRank = ++rank;
                    <MudButton Color="Color.Primary" OnClick=@(() => selectedGoalie = goalie) Variant="@goalieButtonVariant(goalie)">
                        <MudStack Class="d-flex flex-grow-1" Row="true">
                            <MudText>@playerRank</MudText>
                            <MudText Class="d-flex flex-grow-1">@goalie.player_name</MudText>
                            <MudText>@PlayerStatValue(goalie)</MudText>
                        </MudStack>
                    </MudButton>
                }
            </MudStack>
        }
        else
        {
            int rank = 0;
            <MudStack Class="d-flex justify-center" Spacing="3">
                @foreach (var skater in skaterStats!.Take(5))
                {
                    int playerRank = ++rank;
                    <MudButton Color="Color.Primary" OnClick=@(() => selectedSkater = skater) Variant="@skaterButtonVariant(skater)">
                        <MudStack Class="d-flex flex-grow-1" Row="true">
                            <MudText>@playerRank</MudText>
                            <MudText Class="d-flex flex-grow-1">@skater.player_name</MudText>
                            <MudText>@PlayerStatValue(skater)</MudText>
                        </MudStack>
                    </MudButton>
                }
            </MudStack>
        }
        
    </MudPaper>
}

@code{

    [Parameter] 
    public string StatType { get; set; } = "points";
    
    private IEnumerable<BoltonCup.Shared.Data.PlayerStatLine>? skaterStats;
    private IEnumerable<BoltonCup.Shared.Data.GoalieStatLine>? goalieStats;
    
    private BoltonCup.Shared.Data.PlayerStatLine? selectedSkater;
    private BoltonCup.Shared.Data.GoalieStatLine? selectedGoalie;
    
    private bool IsGoalie => new[] { "goals against average", "shutouts" }.Contains(StatType.ToLower());

    private string LeaderName => IsGoalie ? selectedGoalie.player_name : selectedSkater.player_name;
    private string LeaderDetails => IsGoalie ? $"#{selectedGoalie.jersey_number} | G" : $"#{selectedSkater.jersey_number} | {selectedSkater.position.First()}";
    
    private string PlayerStatValue(BoltonCup.Shared.Data.PlayerStatLine player)
    {
        return StatType.ToLower() switch
        {
            "points" => (player.Goals + player.Assists).ToString(),
            "goals" => player.Goals.ToString(),
            "assists" => player.Assists.ToString(),
            _ => "0",
        };
    }    
    
    private string PlayerStatValue(BoltonCup.Shared.Data.GoalieStatLine goalie)
    {
        return StatType.ToLower() switch
        {
            "goals against average" => goalie.GAA.ToString("F2"),
            "shutouts" => goalie.shutouts.ToString(),
            _ => "0",
        };
    }

    private string LeaderStatValue => IsGoalie ? PlayerStatValue(selectedGoalie) : PlayerStatValue(selectedSkater);
    
    private string StatTypeAbbrev => StatType.ToLower() switch
    {
        "points" => "PTS",
        "goals" => "G",
        "assists" => "A",
        "goals against average" => "GAA",
        "shutouts" => "SO",
        _ => string.Empty,
    };

    protected override async Task OnParametersSetAsync()
    {
        var skaterStatTask = BCData.GetPlayerStats();
        var goalieStatTask = BCData.GetGoalieStats();
        await Task.WhenAll(skaterStatTask, goalieStatTask);
        
        skaterStats = skaterStatTask.Result;
        goalieStats = goalieStatTask.Result;

        OrderStats();

        if (skaterStats is not null && goalieStats is not null)
        {
            selectedSkater = skaterStats.First();
            selectedGoalie = goalieStats.First();
        }
    }

    private void OrderStats()
    {
        skaterStats = StatType.ToLower() switch
        {
            "points" => skaterStats?.OrderByDescending(s => s.Goals + s.Assists),
            "goals" => skaterStats?.OrderByDescending(s => s.Goals),
            "assists" => skaterStats?.OrderByDescending(s => s.Assists),
            _ => skaterStats,
        };
        goalieStats = StatType.ToLower() switch
        {
            "goals against average" => goalieStats.OrderBy(g => g.GAA),
            "shutouts" => goalieStats.OrderByDescending(g => g.shutouts),
            _ => goalieStats,
        };
    }

    private Variant skaterButtonVariant(BoltonCup.Shared.Data.PlayerStatLine skater) => (skater.player_id == selectedSkater!.player_id) ?
        Variant.Filled : Variant.Text;    
    private Variant goalieButtonVariant(BoltonCup.Shared.Data.GoalieStatLine goalie) => (goalie.player_id == selectedGoalie!.player_id) ?
        Variant.Filled : Variant.Text;
}