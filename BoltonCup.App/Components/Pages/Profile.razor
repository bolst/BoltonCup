@page "/profile"

@attribute [Authorize]

@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject IBCData BCData

@implements IDisposable

<div class="px-4 py-8">
    @if (account is not null)
    {
        <EditProfilePictureDrawer @bind-Open="drawerOpen" ImageSrc="@account.ProfilePicture" />

        <MudStack AlignItems="AlignItems.Start" Row>
            <MudBadge BadgeClass="mt-n3 ml-n3" Origin="Origin.BottomRight" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Overlap>
                <MudAvatar Class="clickable" Style="height: 100px; width: 100px;" @onclick="@(() => drawerOpen = true)">
                    <MudImage Src="@account.ProfilePicture" Height="200"/>
                </MudAvatar>
            </MudBadge>

            <MudStack Spacing="0">
                <MudText Typo="Typo.h6"><b>@account.FirstName @account.LastName</b></MudText>
                <MudText Typo="Typo.caption">free agent</MudText>
            </MudStack>
        </MudStack>
        
        <MudStack Class="mt-5 mb-2" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Row>
            <MudText Typo="Typo.subtitle1"><b>Games</b></MudText>
            <MudLink Typo="Typo.caption"><b>Set Availability</b></MudLink>
        </MudStack>

        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
            <MudAvatar Style="height: 150px; width: 150px" Elevation="4" Rounded >
                <MudIcon Icon="@Icons.Material.Filled.SportsHockey" Style="font-size: 4rem;" />
            </MudAvatar>
        
            <MudStack AlignItems="AlignItems.Center" Spacing="0">
                <MudText Typo="Typo.subtitle2">No games yet</MudText>
                <MudText Typo="Typo.caption">When you get drafted, your games will show up here</MudText>
            </MudStack>
        </MudStack>
        
        <ConfirmButton Color="Color.Error" ConfirmColor="Color.Error" OnClick="OnLogout">Log out</ConfirmButton>
    }
</div>

@code {
    
    [CascadingParameter]
    public Layout.MainLayout mainLayout { get; set; }

    private BCAccount? account;
    private PlayerProfilePicture? profilePicture;
    private bool drawerOpen;

    protected override void OnParametersSet()
    {
        mainLayout.profileLayout = true;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();

            if (state.User.Identity is null || !state.User.Identity.IsAuthenticated || !state.User.HasClaim(x => x.Type == ClaimTypes.Email))
            {
                return;
            }

            var claim = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email);
            if (claim is null) return;
            
            account = await BCData.GetAccountByEmailAsync(claim.Value);
            
            StateHasChanged();
        }
    }

    private async Task OnLogout()
    {
        await CustomAuthenticationStateProvider.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        mainLayout.profileLayout = false;
    }

}