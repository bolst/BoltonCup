@inject IBCData BCData

<div class="pa-2 mb-4" style="max-width: 400px">
    @if (tournaments is not null)
    {
        <MudSelect @bind-Value="@selectedTournament" Variant="Variant.Outlined" Label="Tournament" Dense>
            @foreach (var tournament in tournaments)
            {
                <MudSelectItem Value="tournament">@tournament.name</MudSelectItem>
            }
        </MudSelect>
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Width="300px" />
    }
</div>

@code {
    
    [Parameter]
    public BCTournament SelectedTournament { get; set; }
    
    [Parameter]
    public EventCallback<BCTournament> SelectedTournamentChanged { get; set; }

    private IEnumerable<BCTournament>? tournaments;
    private BCTournament selectedTournament
    {
        get => SelectedTournament;
        set
        {
            SelectedTournament = value;
            SelectedTournamentChanged.InvokeAsync(value);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        tournaments = await BCData.GetTournamentsAsync();
        if (tournaments is not null)
            selectedTournament = tournaments.Last();
    }
    

}