@inject Data.IBCData BCData
@inject NavigationManager Navigation

@if (orderedGoalies is not null && StatValue is not null && selectedGoalie is not null && profilePictures is not null)
{
    <MudGrid Class="px-sm-6 py-6">
    <MudItem Class="d-flex justify-center" xs="6">
        <MudPaper Class="d-flex justify-center align-center flex-grow-1">
            <MudStack Class="d-flex align-center">
                <MudAvatar Class="clickable" Style="height: 120px; width: 120px;" @onclick=@(() =>
                    Navigation.NavigateTo($"player/{selectedGoalie.PlayerId}"))>
                    <MudImage Src="@profilePictures.Where(p => p.PlayerId == selectedGoalie.PlayerId).First().Source"
                        Height="200" />
                </MudAvatar>

                <MudText Class="d-flex justify-center clickable" @onclick=@(() =>
                    Navigation.NavigateTo($"player/{selectedGoalie.PlayerId}")) Typo="Typo.h5">
                    <b>@selectedGoalie.Name.ToUpper()</b>
                </MudText>

                <MudStack Class="d-flex align-center" Row="true">
                    <MudImage Src="@(TeamLogoById(selectedGoalie.TeamId))" Height="50" />
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudText Typo="Typo.body1">#@selectedGoalie.PlayerNumber</MudText>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudText Typo="Typo.body1">G</MudText>
                </MudStack>

                <MudText Class="d-flex justify-center" Typo="Typo.h6">@Label.ToUpper()</MudText>
                <MudText Class="d-flex justify-center" Typo="Typo.h2">@StatValue(selectedGoalie)</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem Class="d-flex justify-center" Style="min-height: 60vh;" xs="6">
        <MudStack>
            @{
                    int rank = 1;
                    foreach (Data.GoalieStatline goalie in orderedGoalies)
                    {
                        int playerRank = rank;
                        <MudButton OnClick="() => selectedGoalie = goalie" Color="@goalieButtonColor(goalie)"
                            Variant="@goalieButtonVariant(goalie)">
                            <MudStack Class="d-flex flex-grow-1" Row="true">
                                <MudText>@playerRank</MudText>
                                <MudText Class="d-flex flex-grow-1">@goalie.Name.ToUpper()</MudText>
                                <MudText>@StatValue(goalie)</MudText>
                            </MudStack>
                        </MudButton>
                        rank++;
                    }
                }
            </MudStack>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Class="px-sm-6 py-6">
    <MudItem Class="d-flex justify-center" xs="6">
        <MudSkeleton SkeletonType="SkeletonType.Circle" Height="120px" Width="120px" />
    </MudItem>
    <MudItem Class="d-flex justify-center" Style="min-height: 60vh;" xs="6">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="60vh" Width="100%" />
    </MudItem>
</MudGrid>
}

@code {
    [Parameter] public IEnumerable<Data.GoalieStatline>? Goalies { get; set; }
    [Parameter] public Func<Data.GoalieStatline, double>? StatValue { get; set; }
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public bool Ascending { get; set; } = false;

    private IEnumerable<Data.GoalieStatline>? orderedGoalies { get; set; }
    private Data.GoalieStatline? selectedGoalie;
    private IEnumerable<Data.PlayerProfilePicture>? profilePictures;
    private IEnumerable<BCTeam>? teams;

    private string TeamLogoById(int id) => teams is null ? string.Empty : (teams.FirstOrDefault(x => x.id == id)?.logo_url ?? string.Empty);

    protected override async Task OnInitializedAsync()
    {
        var profilePicTask = BCData.GetPlayerProfilePictures();
        var teamsTask = BCData.GetTeams();
        await Task.WhenAll(profilePicTask, teamsTask);
        
        profilePictures = profilePicTask.Result;
        teams = teamsTask.Result;
    }
    protected override void OnParametersSet()
    {
        orderedGoalies = StatValue is null ? Goalies : Goalies?.OrderBy(s => StatValue(s));
        if (!Ascending)
        {
            orderedGoalies = orderedGoalies?.Reverse();
        }
        selectedGoalie = orderedGoalies?.First();
    }

    private Variant goalieButtonVariant(Data.GoalieStatline goalie) => (goalie.PlayerId == selectedGoalie!.PlayerId) ?
    Variant.Filled : Variant.Outlined;
    private Color goalieButtonColor(Data.GoalieStatline goalie) => (goalie.PlayerId == selectedGoalie!.PlayerId) ?
    Color.Primary : Color.Default;
}