@inject NavigationManager Navigation
@inject Data.IBCData BCData

@if (_playerGameByGame is not null)
{
    <MudPaper Class="pa-2 ml-4" Elevation="3">
    <MudStack Class="d-flex align-center" Row="true">
        <MudSelect @bind-Value="_selectedTournament" Underline="false">
            @foreach (var tournament in _tournaments)
            {
                <MudSelectItem Value="@tournament" >
                    @if (tournament?.start_date is not null)
                    {
                        <MudText Class="mx-2" Typo="Typo.body1">
                            @tournament.start_date.Value.ToString("yyyy")
                        </MudText>
                    }
                </MudSelectItem>
            }
        </MudSelect>
        
        <MudDivider Vertical="true" FlexItem="true" />

        @StatColumnRF("GP", _playerGameByGame.Count())
        @StatColumnRF("G", _playerGameByGame.Sum(x => x.goals))
        @StatColumnRF("A", _playerGameByGame.Sum(x => x.assists))
        @StatColumnRF("P", _playerGameByGame.Sum(x => x.goals + x.assists))
    </MudStack>
</MudPaper>
}

@code {
    [Parameter] 
    public int AccountId { get; set; }

    private Data.BCTournament? selectedTournament;
    private Data.BCTournament? _selectedTournament
    {
        get => selectedTournament;
        set
        {
            if (selectedTournament == value) return;

            selectedTournament = value;
            InvokeAsync(LoadDataAsync);
        }
    }
    
    private IEnumerable<BCTournament> _tournaments = [];
    private IEnumerable<Data.PlayerGameSummary>? _playerGameByGame;

    private RenderFragment StatColumnRF(string title, int value) => __builder =>
    {
        <MudStack Class="px-2 px-sm-10 d-flex justify-center">
            <MudText Class="d-flex justify-center" Typo="Typo.subtitle2">@title</MudText>
            <MudText Class="d-flex justify-center" Typo="Typo.h4">@value</MudText>
        </MudStack>
    };


    protected override async Task OnParametersSetAsync()
    {
        _tournaments = await BCData.GetTournamentsAsync();
        _selectedTournament = await BCData.GetCurrentTournamentAsync();

        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        if (_selectedTournament is null) return;
        
        _playerGameByGame = await BCData.GetPlayerGameByGame(AccountId, _selectedTournament.tournament_id);
     
        InvokeAsync(StateHasChanged);
    }
}