@inject NavigationManager Navigation
@inject Data.IBCData BCData

@if (_playerGameByGame is not null)
{
    <MudPaper Class="pa-2 ml-4" Elevation="3">
    <MudStack Class="d-flex align-center" Row="true">
        @if (_tournament?.start_date is not null)
        {
            <MudText Class="mx-4 mx-sm-10" Typo="Typo.h6">
                @_tournament.start_date.Value.ToString("yyyy")
            </MudText>
        }
        <MudDivider Vertical="true" FlexItem="true" />

        @StatColumnRF("GP", _playerGameByGame.Count())
        @StatColumnRF("G", _playerGameByGame.Sum(x => x.goals))
        @StatColumnRF("A", _playerGameByGame.Sum(x => x.assists))
        @StatColumnRF("P", _playerGameByGame.Sum(x => x.goals + x.assists))
    </MudStack>
</MudPaper>
}

@code {
    [Parameter] 
    public int AccountId { get; set; }

    private BCTournament? _tournament;
    private IEnumerable<Data.PlayerGameSummary>? _playerGameByGame;

    private RenderFragment StatColumnRF(string title, int value) => __builder =>
    {
        <MudStack Class="px-2 px-sm-10 d-flex justify-center">
            <MudText Class="d-flex justify-center" Typo="Typo.subtitle2">@title</MudText>
            <MudText Class="d-flex justify-center" Typo="Typo.h4">@value</MudText>
        </MudStack>
    };


    protected override async Task OnInitializedAsync()
    {
        _tournament = await BCData.GetCurrentTournamentAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _playerGameByGame = await BCData.GetPlayerGameByGame(AccountId, _tournament?.tournament_id);
    }
}