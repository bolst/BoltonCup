@page "/register"

@inject IBCData BCData
@inject RegistrationStateService RegStateService
@inject SupabaseServiceProvider SupabaseService

@if (_loading || _currentTournament is null)
{
    <div class="d-flex justify-center align-center" style="height: 100vh">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    if (_currentTournament.registration_open && (_playerCount < _currentTournament.player_limit || _goalieCount < _currentTournament.goalie_limit))
    {
        if (_storedEmailForm is not null)
        {
            <div class="d-flex justify-center px-4" style="height: 80vh">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (_currentTournament.payment_open)
                {
                    <MudText Align="Align.Center" Typo="Typo.h4"><b>Thank you for registering!</b></MudText>
                    <MudText Align="Align.Center" Typo="Typo.h6">To secure a spot you must pay the registration fee at <MudLink Target="_blank" Typo="Typo.inherit" Href="@(_storedEmailForm.IsGoalie ? _currentTournament.goalie_payment_link : _currentTournament.player_payment_link)" Underline="Underline.Always"><b>this link</b></MudLink>.</MudText>
                    <MudButton OnClick="OnFormBegin" Color="Color.Primary">Submit another registration</MudButton>
                }
                else
                {
                    <MudText Align="Align.Center" Typo="Typo.h4"><b>Thank you for registering!</b></MudText>
                    <MudText Align="Align.Center" Typo="Typo.subtitle1">Note that by registering you are <b>not</b> guaranteed a spot for 2025 - if you are admitted you will receive an email with further instructions closer to the tournament date.</MudText>
                    <MudButton OnClick="OnFormBegin" Color="Color.Primary">Submit another</MudButton>
                }
                </MudStack>
            </div>
        }
        else
        {
            <div class="pa-6 d-flex align-center" style="@_containerStyle">
                <MudGrid>
                    <MudItem xs="12" md="6" Class="d-flex align-center justify-center">
                        &nbsp;<div>
                            <MudText Typo="Typo.h3" Color="Color.Dark"><b>Register for Bolton Cup 2025</b></MudText>
                            <MudText Typo="Typo.h6" Color="Color.Dark"><b>If you've already registered and need to pay, check your email</b></MudText>
                            <MudText Typo="Typo.h6" Color="Color.Dark"><b>Your spot is not reserved until you pay</b></MudText>
                        </div>
                    </MudItem>        
                    <MudItem xs="12" md="6">
                        <MudPaper Class="pa-6 px-10">
                            <RegisterForm OnSubmit="OnFormSubmit" DisablePlayers="_playerCount >= _currentTournament.player_limit" DisableGoalies="_goalieCount >= _currentTournament.goalie_limit">
                                <ErrorContent>
                                    @if (_playerCount >= _currentTournament.player_limit)
                                    {
                                        <MudText Color="Color.Info"><b>NOTE: All player spots have been filled!</b></MudText>
                                    }
                                    else if (_goalieCount >= _currentTournament.goalie_limit)
                                    {
                                        <MudText Color="Color.Info"><b>NOTE: All goalie spots have been filled!</b></MudText>
                                    }
                                    <MudText Color="Color.Error">@_errorMessage</MudText>
                                </ErrorContent>
                            </RegisterForm>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </div>
        }
    }
    else
    {
        <div class="pa-6 d-flex align-center" style="@_containerStyle">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-center">
                    &nbsp;<div>
                        <MudText Typo="Typo.h3" Color="Color.Dark"><b>Registration has closed.</b></MudText>
                    </div>
                </MudItem>
            </MudGrid>
        </div>
    }
}

@code{
    
    private readonly string _containerStyle = "height: 120vh; background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://iiedqecnfyojvubvugmy.supabase.co/storage/v1/object/public/images//BOLTONCUP-86.webp'); background-size: cover; background-position: center center;";

    private bool _loading;
    private string? _storedEmail;
    private string _errorMessage = string.Empty;
    private BCTournament? _currentTournament;
    private RegisterFormModel? _storedEmailForm;
    private int _playerCount;
    private int _goalieCount;
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loading = true;
            StateHasChanged();
            
            _currentTournament = await BCData.GetCurrentTournamentAsync();
            if (_currentTournament is not null)
            {
                var players = await BCData.GetAllTournamentPlayersAsync(_currentTournament.tournament_id);
                _playerCount = players.Count(p => !p.IsGoalie);
                _goalieCount = players.Count(p => p.IsGoalie);
            }
            
            _storedEmail = await RegStateService.GetBrowserRegistered();

            if (_storedEmail is not null)
            {
                _storedEmailForm = await BCData.GetRegistrationByEmailAsync(_storedEmail);
            }
            
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task OnFormBegin()
    {
        await RegStateService.Clear();
        _storedEmail = null;
        _storedEmailForm = null;
        
        StateHasChanged();
    }
    
    private async Task OnFormSubmit(RegisterFormModel form)
    {
        string errorMessage = await BCData.SubmitRegistration(form);

        if (string.IsNullOrEmpty(errorMessage))
        {
            await SupabaseService.SendRegistrationEmail(form);
            await RegStateService.SetBrowserRegistered(form.Email);
            
            _storedEmail = form.Email;
            if (_storedEmail is not null)
            {
                _storedEmailForm = await BCData.GetRegistrationByEmailAsync(_storedEmail);
            }
        }
        else
        {
            _errorMessage = errorMessage;
        }
        
        StateHasChanged();
    }

}