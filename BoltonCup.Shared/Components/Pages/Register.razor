@page "/register"

@inject IBCData BCData
@inject RegistrationStateService RegStateService
@inject Supabase.Client SBClient

@if (_hasRegistered is null)
{
    <div class="d-flex justify-center align-center" style="height: 100vh">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    if (_currentTournament is not null && _currentTournament.registration_open)
    {
        if (_hasRegistered.Value)
        {
            <div class="d-flex justify-center px-4" style="height: 80vh">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (_currentTournament.payment_open)
                {
                    <MudText Align="Align.Center" Typo="Typo.h4"><b>Thank you for registering!</b></MudText>
                    <MudText Align="Align.Center" Typo="Typo.h6">To secure a spot you must pay the registration fee at <MudLink Target="_blank" Typo="Typo.inherit" Href="@_currentTournament.payment_link" Underline="Underline.Always"><b>this link</b></MudLink>.</MudText>
                    <MudButton OnClick="OnFormBegin" Color="Color.Primary">Submit another registration</MudButton>
                }
                else
                {
                    <MudText Align="Align.Center" Typo="Typo.h4"><b>Thank you for registering!</b></MudText>
                    <MudText Align="Align.Center" Typo="Typo.subtitle1">Note that by registering you are <b>not</b> guaranteed a spot for 2025 - if you are admitted you will receive an email with further instructions closer to the tournament date.</MudText>
                    <MudButton OnClick="OnFormBegin" Color="Color.Primary">Submit another</MudButton>
                }
                </MudStack>
            </div>
        }
        else
        {
            <div class="pa-6 d-flex align-center" style="@_containerStyle">
                <MudGrid>
                    <MudItem xs="12" md="6" Class="d-flex align-center justify-center">
                        &nbsp;<div>
                            <MudText Typo="Typo.h3" Color="Color.Dark"><b>Register for Bolton Cup 2025</b></MudText>
                        </div>
                    </MudItem>        
                    <MudItem xs="12" md="6">
                        <MudPaper Class="pa-6 px-10">
                            <RegisterForm OnSubmit="OnFormSubmit">
                                <ErrorContent>
                                    <MudText Color="Color.Error">@_errorMessage</MudText>
                                </ErrorContent>
                            </RegisterForm>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </div>
        }
    }
    else
    {
        <div class="pa-6 d-flex align-center" style="@_containerStyle">
            <MudGrid>
                <MudItem xs="12" Class="d-flex align-center justify-center">
                    &nbsp;<div>
                        <MudText Typo="Typo.h3" Color="Color.Dark"><b>Registration has closed.</b></MudText>
                    </div>
                </MudItem>
            </MudGrid>
        </div>
    }
}

@code{
    
    private readonly string _containerStyle = "height: 120vh; background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://iiedqecnfyojvubvugmy.supabase.co/storage/v1/object/public/images//BOLTONCUP-86.webp'); background-size: cover; background-position: center center;";

    private bool? _hasRegistered;
    private string _errorMessage = string.Empty;
    private BCTournament? _currentTournament;

    protected override async Task OnInitializedAsync()
    {
        _currentTournament = await BCData.GetCurrentTournamentAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasRegistered = await RegStateService.GetBrowserRegistered();
            
            StateHasChanged();
        }
    }

    private async Task OnFormBegin()
    {
        await RegStateService.SetBrowserRegistered(false);
        _hasRegistered = false;
        
        StateHasChanged();
    }
    
    private async Task OnFormSubmit(RegisterFormModel form)
    {
        string errorMessage = await BCData.SubmitRegistration(form);

        if (string.IsNullOrEmpty(errorMessage))
        {
            await RegStateService.SetBrowserRegistered(true);
            _hasRegistered = true;

            if (_currentTournament is not null && _currentTournament.payment_open || true)
            {
                await SendEmailAsync(form);
            }
            
        }
        else
        {
            _errorMessage = errorMessage;
        }
        
        StateHasChanged();
    }


    // TODO: put this in a service
    private async Task SendEmailAsync(RegisterFormModel form)
    {
        var options = new Supabase.Functions.Client.InvokeFunctionOptions
        {
            Body = new Dictionary<string, object>
            {
                { "name", "Functions" },
                { "to", form.Email },
                { "subject", "Registration - Bolton Cup 2025" },
                { "html", "Hello there!" }
            }
        };
        await SBClient.Functions.Invoke("resend-email", options: options);
    }
    
}