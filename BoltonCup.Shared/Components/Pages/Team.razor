@page "/team/{id:int}"

@inject IBCData BCData
@inject NavigationManager Navigation

<PageTitle>@team?.name_short</PageTitle>

<MudPaper Class="pa-10 ma-5" Elevation="5">
    @if (team is not null && roster is not null)
    {
        <MudStack Class="mb-6 d-flex align-center" Row="true" Wrap="Wrap.Wrap">
            <MudText Typo="Typo.h3">@team.name_short.ToUpper()</MudText>
            <MudImage Src="@team.logo_url" Height="150" />
        </MudStack>

        <MudTable
            T="PlayerProfile"
            Items="roster"
            Elevation="0"
            GroupBy="_groupDefinition"
            OnRowClick="OnRowClick"
            Striped
            Hover
            Dense>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>NAME</MudTh>
                <MudTh>BIRTH YEAR</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh colspan="3">
                    <MudText Typo="Typo.h5">@GroupHeader(context.Key.ToString())</MudText>
                </MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd DataLabel="#">@(context.jersey_number is null ? string.Empty : context.jersey_number.Value.ToString("D2"))</MudTd>
                <MudTd DataLabel="NAME">@context.name</MudTd>
                <MudTd DataLabel="BIRTH YEAR">@context.dob.ToString("yyyy")</MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="30vw" Height="10vh" />
        <MudSkeleton Class="my-5" SkeletonType="SkeletonType.Rectangle" Width="70vw" Height="40vh" />
        <MudSkeleton Class="my-5" SkeletonType="SkeletonType.Rectangle" Width="70vw" Height="40vh" />
        <MudSkeleton Class="my-5" SkeletonType="SkeletonType.Rectangle" Width="70vw" Height="20vh" />
    }
    </MudPaper>

    @code {
    [Parameter] public int Id { get; set; }

    private BoltonCup.Shared.Data.BCTeam? team { get; set; }
    private IEnumerable<PlayerProfile>? roster { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        team = await BCData.GetTeamById(Id);
        roster = await BCData.GetRosterByTeamId(Id);
    }


    private string GroupHeader(string key)
    {
        return key switch
        {
            "forward" => "Forwards",
            "defense" => "Defensemen",
            "goalie" => "Goalies",
            _ => string.Empty
        };
    }
    
    
    private TableGroupDefinition<PlayerProfile> _groupDefinition = new()
    {
        GroupName = "position",
        Selector = (player) => player.position,
    };


    private void OnRowClick(TableRowClickEventArgs<PlayerProfile> args)
    {
        Navigation.NavigateTo($"/player/{args.Item.id}");
    }

    private RenderFragment PlayerTable(IEnumerable<PlayerProfile> players) => __builder =>
    {
        <MudSimpleTable Class="mb-6" Hover="true" Dense="true" Striped="true" Elevation="0">
            <thead>
                <tr>
                    <th><b>#</b></th>
                    <th><b>NAME</b></th>
                    <th><b>BIRTH YEAR</b></th>
                </tr>
            </thead>
            <tbody>
                @foreach (PlayerProfile player in players)
                {
                    <tr class="clickable" onclick=@(() => Navigation.NavigateTo($"player/{player.id}"))>
                        <th>@(player.jersey_number is null ? string.Empty : player.jersey_number.Value.ToString("D2"))</th>
                        <th>@player.name</th>
                        <th>@player.dob.ToString("yyyy")</th>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    };

}