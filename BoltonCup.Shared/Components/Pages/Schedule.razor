@page "/schedule"

@inject IBCData BCData

<PageHeader>Schedule</PageHeader>

<div class="mx-2 mx-md-2">
    
    <TournamentPicker @bind-SelectedTournament="selectedTournament" />
    
    @if (renderedSchedule is not null && selectedTournament is not null)
    {
        if (renderedSchedule.Any())
        {
            foreach (var day in renderedSchedule.DistinctBy(x => x.date.Day).Select(x => x.date))
            {
                <MudText Typo="Typo.h4">@day.ToString("dddd, MMMM dd")</MudText>
                <MudDivider/>
                <ScheduleTable Games="renderedSchedule.Where(g => g.date.Date == day.Date)"/>
            }
        }
        else
        {
            <MudText Typo="Typo.h6" Class="pa-6">No games scheduled yet.</MudText>
        }
    }
    else
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" Width="100%" />
    }
</div>

@code {

    public IEnumerable<BCGame>? fullSchedule;

    private IEnumerable<BCGame>? renderedSchedule
    {
        get
        {
            if (fullSchedule is null) return null;
            
            var schedule = fullSchedule.ToList();

            if (selectedTournament is not null)
            {
                schedule = schedule.Where(x => x.tournament_id == selectedTournament.tournament_id).ToList();
            }

            return schedule;
        }
    }

    private BCTournament? selectedTournament;

    protected override async Task OnInitializedAsync()
    {
        fullSchedule = await BCData.GetSchedule();
    }

}