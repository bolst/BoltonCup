@page "/stats"

@inject IBCData BCData

<PageHeader>Statistics</PageHeader>

@if (teams is not null)
{
    <MudTabs Centered>
        @if (skaterStats is not null)
        {
            <MudTabPanel Text="Skaters" BadgeData="skaterStats.Count()">
                <MudDataGrid Items="@skaterStats" QuickFilter="@_playerQuickFilter" Striped Dense>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Skaters</MudText>
                        <MudSpacer/>
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn Title="Player" Sortable="true" Filterable="true" StickyLeft>
                            <CellTemplate>
                                <MudStack AlignItems="AlignItems.Center" Row>
                                    <MudAvatar>
                                        <MudImage Src="@profilePictures.First(x => x.PlayerId == context.Item.PlayerId).Source"/>
                                    </MudAvatar>
                                    <MudText Typo="Typo.subtitle1">@context.Item.Name</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.PlayerNumber" Title="No"/>
                        <PropertyColumn Property="x => x.Position" Title="Pos"/>
                        <PropertyColumn Property="x => x.Goals" Title="G" Sortable="true" Filterable="true"/>
                        <PropertyColumn Property="x => x.Assists" Title="A" Sortable="true" Filterable="true"/>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
        @if (goalieStats is not null)
        {
            <MudTabPanel Text="Goalies" BadgeData="goalieStats.Count()">
                <MudDataGrid Items="@goalieStats" QuickFilter="@_goalieQuickFilter" Striped Dense>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Skaters</MudText>
                        <MudSpacer/>
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn Title="Player" Sortable="true" Filterable="true" StickyLeft>
                            <CellTemplate>
                                <MudStack AlignItems="AlignItems.Center" Row>
                                    <MudAvatar>
                                        <MudImage Src="@profilePictures.First(x => x.PlayerId == context.Item.PlayerId).Source"/>
                                    </MudAvatar>
                                    <MudText Typo="Typo.subtitle1">@context.Item.Name</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn> <PropertyColumn Property="x => x.PlayerNumber" Title="No"/>
                        <PropertyColumn Property="x => 'G'" Title="Pos"/>
                        <PropertyColumn Property="x => x.GAA" Title="GAA" Sortable="true" Filterable="true"/>
                        <PropertyColumn Property="x => x.Shutouts" Title="SO" Sortable="true" Filterable="true"/>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
    </MudTabs>
}


@code {

    private IEnumerable<PlayerStatline>? skaterStats;
    private IEnumerable<GoalieStatline>? goalieStats;
    private IEnumerable<BCTeam>? teams;
    private IEnumerable<PlayerProfilePicture>? profilePictures;

    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        var skaterTask = BCData.GetPlayerStats();
        var goalieTask = BCData.GetGoalieStats();
        var teamTask = BCData.GetTeams();
        var profilePicTask = BCData.GetPlayerProfilePictures();
        await Task.WhenAll(skaterTask, goalieTask, teamTask, profilePicTask);
        
        skaterStats = skaterTask.Result;
        goalieStats = goalieTask.Result;
        teams = teamTask.Result;
        profilePictures = profilePicTask.Result;
    }
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<PlayerStatline, bool> _playerQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };    
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<GoalieStatline, bool> _goalieQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
