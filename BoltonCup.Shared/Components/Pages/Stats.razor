@page "/stats"

@inject IBCData BCData
@inject NavigationManager Navigation

<PageHeader Title="Stats" BkgImage="https://iiedqecnfyojvubvugmy.supabase.co/storage/v1/object/public/images//BOLTONCUP-160.JPG" OffsetY="30" Height="25vh">Statistics</PageHeader>

<TournamentPicker SelectedTournament="_selectedTournament" SelectedTournamentChanged="SelectedTournamentChanged" />

<MudTabs Class="relative pb-14" PanelClass="mx-lg-20 mx-0 px-lg-20 px-0" ActivePanelIndex="_activeTabIndex" ActivePanelIndexChanged="ActiveTabChanged" Centered>
    <MudStack Class="d-flex flex-grow-1 px-4 py-4" Style="background-color: var(--mud-palette-surface)" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
        <div style="width: 200px">
            <MudSelect T="BCTeam" Value="_selectedFilterTeam" ValueChanged="SelectedTeamChanged" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="Team" Dense>
                <MudSelectItem Value="null as BCTeam">All</MudSelectItem>
                @foreach (var team in _teams)
                {
                    <MudSelectItem Value="team">
                        <MudStack AlignItems="AlignItems.Center" Row>
                            <MudImage Src="@team.logo_url" Height="20" Class="mr-1"/> 
                            @team.name_short
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        
        <MudSpacer/>
                    
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </MudStack>
        
    <MudTabPanel Text="Skaters" BadgeData="_skaterStats.Count()">
        <MudDataGrid Items="_skaterStats" ColumnResizeMode="ResizeMode.Column" QuickFilter="PlayerQuickFilter" Height="80vh" SortMode="SortMode.Single" Breakpoint="Breakpoint.None" ShowColumnOptions="false" FixedHeader Dense>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Skaters</MudText>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.player_name" Title="Player" CellStyle="min-width: 200px" Resizable="false" StickyLeft>
                    <CellTemplate>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1" Row>
                            <MudAvatar Style="height: 30px; width: 30px">
                                <MudImage Src="@context.Item.profilepicture" ObjectFit="ObjectFit.Cover" />
                            </MudAvatar>
                            
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert>
                                <MudText Typo="Typo.body2"><MudLink Typo="Typo.body2" Href=@($"/player/{context.Item.player_id}")>@context.Item.ShortName</MudLink> @(context.Item.jersey_number == 0 ? string.Empty : $"#{context.Item.jersey_number}")</MudText>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs">
                                <MudText Typo="Typo.body2"><MudLink Typo="Typo.body2" Href=@($"/player/{context.Item.player_id}")>@context.Item.player_name</MudLink> @(context.Item.jersey_number == 0 ? string.Empty : $"#{context.Item.jersey_number}")</MudText>
                            </MudHidden>
                        </MudStack>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.team_name" Title="Team" Sortable="false" Resizable="false">
                    <CellTemplate>
                        <MudImage Src="@_teams.FirstOrDefault(x => x.id == context.Item.team_id)?.logo_url" Height="30" />
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.dob.Year" Title="Year" Resizable="false" />
                <PropertyColumn Property="x => x.position.ToUpper().FirstOrDefault()" Title="Pos" Sortable="false" Resizable="false" />
                <PropertyColumn Property="x => x.goals + x.assists" Title="P" Resizable="false" />
                <PropertyColumn Property="x => x.goals" Title="G" Resizable="false" />
                <PropertyColumn Property="x => x.assists" Title="A" Resizable="false" />
            </Columns>
        </MudDataGrid>
    </MudTabPanel>
    
    <MudTabPanel Text="Goalies" BadgeData="_goalieStats.Count()">
        <MudDataGrid Items="_goalieStats" ColumnResizeMode="ResizeMode.Column" QuickFilter="GoalieQuickFilter" Height="80vh" SortMode="SortMode.Single" ShowColumnOptions="false" Breakpoint="Breakpoint.None" FixedHeader Dense>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Goalies</MudText>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.player_name" Title="Goalie" CellStyle="min-width: 200px" Resizable="false" StickyLeft>
                    <CellTemplate>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1" Row>
                            <MudAvatar Style="height: 30px; width: 30px">
                                <MudImage Src="@context.Item.profilepicture" ObjectFit="ObjectFit.Cover" />
                            </MudAvatar>

                            <MudHidden Breakpoint="Breakpoint.Xs" Invert>
                                <MudText Typo="Typo.body2"><MudLink Typo="Typo.body2" Href=@($"/player/{context.Item.player_id}")>@context.Item.ShortName</MudLink> @(context.Item.jersey_number == 0 ? string.Empty : $"#{context.Item.jersey_number}")</MudText>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs">
                                <MudText Typo="Typo.body2"><MudLink Typo="Typo.body2" Href=@($"/player/{context.Item.player_id}")>@context.Item.player_name</MudLink> @(context.Item.jersey_number == 0 ? string.Empty : $"#{context.Item.jersey_number}")</MudText>
                            </MudHidden>
                        </MudStack>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.team_name" Title="Team" Sortable="false" Resizable="false">
                    <CellTemplate>
                        <MudImage Src="@_teams.FirstOrDefault(x => x.id == context.Item.team_id)?.logo_url" Height="30" />
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.dob.Year" Title="Year" Resizable="false" />
                <PropertyColumn Property="x => x.games_played" Title="GP" Resizable="false" />
                <PropertyColumn Property="x => x.GAA" Title="GAA" Sortable="true" Resizable="false"/>
                <PropertyColumn Property="x => x.shutouts" Title="SO" Sortable="true" Resizable="false"/>
            </Columns>
        </MudDataGrid>
    </MudTabPanel>
    
    <MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
        <MudProgressCircular Indeterminate />
    </MudOverlay>
</MudTabs>


@code {
    
    [SupplyParameterFromQuery]
    public int? tab { get; set; }

    [SupplyParameterFromQuery]
    public int? team { get; set; }

    [SupplyParameterFromQuery] 
    public int? tourney { get; set; }
    

    private IEnumerable<PlayerStatLine> _skaterStats = [];
    private IEnumerable<GoalieStatLine> _goalieStats = [];
    private IEnumerable<BCTeam> _teams = [];
    
    private bool _loading;
    private string _searchString;
    
    private int _activeTabIndex;
    private BCTeam? _selectedFilterTeam;
    private BCTournament? _selectedTournament;


    protected override async Task OnParametersSetAsync()
    {
        var reload = false;

        if (_selectedTournament is null)
        {
            _selectedTournament = await BCData.GetCurrentTournamentAsync();
            reload = true;
        }
        
        if (tab is not null && _activeTabIndex != tab)
        {
            _activeTabIndex = tab.Value;
        }

        if (team is not null && _selectedFilterTeam?.id != team)
        {
            _selectedFilterTeam = await BCData.GetTeamById(team.Value);
            reload = true;
        }

        if (tourney is not null && _selectedTournament?.tournament_id != tourney)
        {
            _selectedTournament = await BCData.GetTournamentByIdAsync(tourney.Value);
            reload = true;
        }

        if (reload)
            await LoadDataAsync();
        
    }
    

    private async Task LoadDataAsync()
    {
        if (_selectedTournament is not null)
        {
            _loading = true;
            InvokeAsync(StateHasChanged);
            
            _teams = await BCData.GetTeamsInTournamentAsync(_selectedTournament.tournament_id);

            // invalidate invalid arguments
            if (_selectedFilterTeam is not null && _teams.All(x => x.id != _selectedFilterTeam.id))
            {
                _selectedFilterTeam = null;
            }
            
            _skaterStats = await BCData.GetPlayerStats(_selectedTournament.tournament_id, _selectedFilterTeam?.id);
            _goalieStats = await BCData.GetGoalieStats(_selectedTournament.tournament_id, _selectedFilterTeam?.id);

            _loading = false;
            InvokeAsync(StateHasChanged);
        }
    }


    private async Task SelectedTournamentChanged(BCTournament value)
    {
        if (value?.tournament_id != _selectedTournament?.tournament_id)
        {
            _selectedFilterTeam = null;
            _selectedTournament = value;
            await NavWithParam("tourney", value.tournament_id);
            await LoadDataAsync();
        }
    }


    private async Task ActiveTabChanged(int value)
    {
        _activeTabIndex = value;
        await NavWithParam("tab", value);
        _searchString = string.Empty;
    }


    private async Task SelectedTeamChanged(BCTeam? value)
    {
        if (value?.id != _selectedFilterTeam?.id)
        {
            _selectedFilterTeam = value;
            if (value is not null)
                await NavWithParam("team", value.id);
            await LoadDataAsync();
        }
    }


    private async Task NavWithParam(string name, int value)
    {
        try
        {
            Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(name, value));
        }
        catch {}
    }
    
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<PlayerStatLine, bool> PlayerQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        if (x.player_name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    };    
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<GoalieStatLine, bool> GoalieQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        if (x.player_name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
