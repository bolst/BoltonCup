@page "/stats"

@inject IBCData BCData

<PageHeader Title="Stats">Statistics</PageHeader>

<TournamentPicker @bind-SelectedTournament="_selectedTournament" />

<MudTabs Class="relative" @bind-ActivePanelIndex="_activeTabIndex" Centered>
    <MudStack Class="d-flex flex-grow-1 px-4 py-4" Style="background-color: var(--mud-palette-surface)" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
        <div style="width: 200px">
            <MudSelect @bind-Value="_selectedFilterTeam" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="Team" Dense>
                <MudSelectItem Value="null as BCTeam">All</MudSelectItem>
                @foreach (var team in _teams)
                {
                    <MudSelectItem Value="team">
                        <MudStack AlignItems="AlignItems.Center" Row>
                            <MudImage Src="@team.logo_url" Height="20" Class="mr-1"/> 
                            @team.name_short
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        
        <MudSpacer/>
                    
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
    </MudStack>
        
    <MudTabPanel Text="Skaters" BadgeData="_skaterStats.Count()">
        <MudDataGrid Items="_skaterStats" QuickFilter="PlayerQuickFilter" Height="65vh" SortMode="SortMode.Single" Filterable FixedHeader Dense>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Skaters</MudText>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.player_name" Title="Player" StickyLeft>
                    <CellTemplate>
                        <MudStack AlignItems="AlignItems.Center" Row>
                            <MudAvatar>
                                <MudImage Src="@context.Item.profilepicture"/>
                            </MudAvatar>
                            <MudLink Typo="Typo.subtitle1" Href=@($"/player/{context.Item.player_id}")>@context.Item.player_name</MudLink>
                            <MudImage Src="@_teams.FirstOrDefault(x => x.id == context.Item.team_id)?.logo_url" Height="30"/>
                        </MudStack>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.jersey_number" Title="#"/>
                <PropertyColumn Property="x => x.position" Title="Pos"/>
                <PropertyColumn Property="x => x.goals + x.assists" Title="P" InitialDirection="SortDirection.Descending"/>
                <PropertyColumn Property="x => x.goals" Title="G" />
                <PropertyColumn Property="x => x.assists" Title="A" />
            </Columns>
        </MudDataGrid>
    </MudTabPanel>
    
    <MudTabPanel Text="Goalies" BadgeData="_goalieStats.Count()">
        <MudDataGrid Items="_goalieStats" QuickFilter="GoalieQuickFilter" Height="65vh" FixedHeader Dense>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Goalies</MudText>
            </ToolBarContent>
            <Columns>
                <TemplateColumn Title="Goalie" Sortable="true" Filterable="true" StickyLeft>
                    <CellTemplate>
                        <MudStack AlignItems="AlignItems.Center" Row>
                            <MudAvatar>
                                <MudImage Src=""/>
                            </MudAvatar>
                            <MudLink Typo="Typo.subtitle1" Href=@($"/player/{context.Item.player_id}")>@context.Item.player_name</MudLink>
                            <MudImage Src="@context.Item.team_logo" Height="30"/>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.jersey_number" Title="#"/>
                <PropertyColumn Property="x => 'G'" Title="Pos"/>
                <PropertyColumn Property="x => x.GAA" Title="GAA" Sortable="true" Filterable="true" InitialDirection="SortDirection.Ascending"/>
                <PropertyColumn Property="x => x.shutouts" Title="SO" Sortable="true" Filterable="true"/>
            </Columns>
        </MudDataGrid>
    </MudTabPanel>
    
    <MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
        <MudProgressCircular Indeterminate />
    </MudOverlay>
</MudTabs>


@code {
    
    private IEnumerable<PlayerStatLine> _skaterStats = [];
    private IEnumerable<GoalieStatLine> _goalieStats = [];
    private IEnumerable<BCTeam> _teams = [];
    
    
    private BCTeam? selectedFilterTeam;
    private BCTeam? _selectedFilterTeam
    {
        get => selectedFilterTeam;
        set
        {
            if (value?.id != selectedFilterTeam?.id)
            {
                selectedFilterTeam = value;
                InvokeAsync(LoadDataAsync);
            }
        }
    }
    
    private string _searchString;
    private bool _loading;
    
    private int activeTabIndex;
    private int _activeTabIndex
    {
        get => activeTabIndex;
        set
        {
            activeTabIndex = value;
            _searchString = string.Empty;
        }
    }

    private BCTournament? selectedTournament;
    private BCTournament? _selectedTournament
    {
        get => selectedTournament;
        set
        {
            if (value?.tournament_id != selectedTournament?.tournament_id)
            {
                _selectedFilterTeam = null;
                selectedTournament = value;
                InvokeAsync(LoadDataAsync);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedTournament ??= await BCData.GetCurrentTournamentAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (_selectedTournament is not null)
        {
            _loading = true;
            InvokeAsync(StateHasChanged);
            
            _skaterStats = await BCData.GetPlayerStats(_selectedTournament.tournament_id, _selectedFilterTeam?.id);
            _goalieStats = await BCData.GetGoalieStats(_selectedTournament.tournament_id, _selectedFilterTeam?.id);
            _teams = await BCData.GetTeamsInTournamentAsync(_selectedTournament.tournament_id);

            _loading = false;
            InvokeAsync(StateHasChanged);
        }
    }
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<PlayerStatLine, bool> PlayerQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        if (x.player_name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    };    
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<GoalieStatLine, bool> GoalieQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        
        if (x.player_name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
