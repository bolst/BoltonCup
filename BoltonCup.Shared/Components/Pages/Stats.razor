@page "/stats"

@inject IBCData BCData

<PageHeader>Statistics</PageHeader>

<TournamentPicker @bind-SelectedTournament="selectedTournament" />

@if (teams is not null)
{
    <MudTabs @bind-ActivePanelIndex="activeTabIndex" Centered>
        <MudStack Class="d-flex flex-grow-1 px-4 py-4" Style="background-color: var(--mud-palette-surface)" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Row>
            <div style="width: 200px">
                <MudSelect @bind-Value="selectedFilterTeam" Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="Team" Dense>
                    <MudSelectItem Value="null as BCTeam">All</MudSelectItem>
                    @foreach (var team in teams)
                    {
                        <MudSelectItem Value="team">
                            <MudStack AlignItems="AlignItems.Center" Row>
                                <MudImage Src="@team.logo_url" Height="20" Class="mr-1"/> 
                                @team.name_short
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>
            </div>
            
            <MudSpacer/>
                        
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </MudStack>
            
        @if (renderedSkaterStats is not null)
        {
            <MudTabPanel Text="Skaters" BadgeData="renderedSkaterStats.Count()">
                <MudDataGrid Items="@renderedSkaterStats" QuickFilter="@_playerQuickFilter" Height="65vh" FixedHeader Dense>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Skaters</MudText>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn Title="Player" Sortable="true" Filterable="true" StickyLeft>
                            <CellTemplate>
                                <MudStack AlignItems="AlignItems.Center" Row>
                                    <MudAvatar>
                                        <MudImage Src="@profilePictures.FirstOrDefault(x => x.PlayerId == context.Item.PlayerId)?.Source"/>
                                    </MudAvatar>
                                    <MudLink Typo="Typo.subtitle1" Href=@($"/player/{context.Item.PlayerId}")>@context.Item.Name</MudLink>
                                    <MudImage Src="@teams.FirstOrDefault(x => x.id == context.Item.TeamId)?.logo_url" Height="30"/>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.PlayerNumber" Title="#"/>
                        <PropertyColumn Property="x => x.Position" Title="Pos"/>
                        <PropertyColumn Property="x => x.Goals + x.Assists" Title="P" Sortable="true" Filterable="true" InitialDirection="SortDirection.Descending"/>
                        <PropertyColumn Property="x => x.Goals" Title="G" Sortable="true" Filterable="true"/>
                        <PropertyColumn Property="x => x.Assists" Title="A" Sortable="true" Filterable="true"/>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
        @if (renderedGoalieStats is not null)
        {
            <MudTabPanel Text="Goalies" BadgeData="renderedGoalieStats.Count()">
                <MudDataGrid Items="@renderedGoalieStats" QuickFilter="@_goalieQuickFilter" Height="65vh" FixedHeader Dense>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Goalies</MudText>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn Title="Goalie" Sortable="true" Filterable="true" StickyLeft>
                            <CellTemplate>
                                <MudStack AlignItems="AlignItems.Center" Row>
                                    <MudAvatar>
                                        <MudImage Src="@profilePictures.First(x => x.PlayerId == context.Item.PlayerId).Source"/>
                                    </MudAvatar>
                                    <MudLink Typo="Typo.subtitle1" Href=@($"/player/{context.Item.PlayerId}")>@context.Item.Name</MudLink>
                                    <MudImage Src="@teams.First(x => x.id == context.Item.TeamId).logo_url" Height="30"/>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.PlayerNumber" Title="#"/>
                        <PropertyColumn Property="x => 'G'" Title="Pos"/>
                        <PropertyColumn Property="x => x.GAA" Title="GAA" Sortable="true" Filterable="true" InitialDirection="SortDirection.Ascending"/>
                        <PropertyColumn Property="x => x.Shutouts" Title="SO" Sortable="true" Filterable="true"/>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
    </MudTabs>
}


@code {
    
    private IEnumerable<PlayerStatLine>? allSkaterStats;
    private IEnumerable<PlayerStatLine>? renderedSkaterStats
    {
        get
        {
            if (allSkaterStats is null) return null;
            
            var skaterStats = allSkaterStats.ToList();
            
            if (selectedFilterTeam is not null)
            {
                skaterStats = skaterStats.Where(x => x.TeamId == selectedFilterTeam.id).ToList();
            }
            
            if (selectedTournament is not null)
            {
                skaterStats = skaterStats.Where(x => x.TournamentId == selectedTournament.tournament_id).ToList();
            }

            // TODO: investigate why default sort doesn't work on MAUI
            return skaterStats.OrderByDescending(x => x.Goals + x.Assists).ToList();
        }    
    }
    
    private IEnumerable<GoalieStatLine>? allGoalieStats;
    private IEnumerable<GoalieStatLine>? renderedGoalieStats
    {
        get
        {
            if (allGoalieStats is null) return null;
            
            var goalieStats = allGoalieStats.ToList();
            
            if (selectedFilterTeam is not null)
            {
                goalieStats = goalieStats.Where(x => x.TeamId == selectedFilterTeam.id).ToList();
            }
            
            if (selectedTournament is not null)
            {
                goalieStats = goalieStats.Where(x => x.TournamentId == selectedTournament.tournament_id).ToList();
            }
            
            // TODO: investigate why default sort doesn't work on MAUI
            return goalieStats.OrderBy(x => x.GAA).ToList();
        }  
    }
    private IEnumerable<PlayerProfilePicture>? profilePictures;
    private string searchString;
    
    private IEnumerable<BCTeam>? allTeams;
    private IEnumerable<BCTeam>? teams
    {
        get
        {
            if (selectedTournament is null || allTeams is null) return allTeams;
            
            return allTeams.Where(x => x.tournament_id == selectedTournament.tournament_id);
        }
    }

    private BCTeam? selectedFilterTeam;
    
    private int _activeTabIndex;
    private int activeTabIndex
    {
        get => _activeTabIndex;
        set
        {
            _activeTabIndex = value;
            searchString = string.Empty;
        }
    }

    private BCTournament? _selectedTournament;
    private BCTournament? selectedTournament
    {
        get => _selectedTournament;
        set
        {
            if (value is null)
            {
                _selectedTournament = null;
                selectedFilterTeam = null;
                return;
            }
            
            if (!value.Equals(_selectedTournament))
            {
                selectedFilterTeam = null;

                _selectedTournament = value;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var skaterTask = BCData.GetPlayerStats();
        var goalieTask = BCData.GetGoalieStats();
        var teamTask = BCData.GetTeams();
        var profilePicTask = BCData.GetPlayerProfilePictures();
        await Task.WhenAll(skaterTask, goalieTask, teamTask, profilePicTask);
        
        allSkaterStats = skaterTask.Result;
        allGoalieStats = goalieTask.Result;
        allTeams = teamTask.Result;
        profilePictures = profilePicTask.Result;
    }
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<PlayerStatLine, bool> _playerQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    };    
    
    // quick filter - filter globally across multiple columns with the same input
    private Func<GoalieStatLine, bool> _goalieQuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
