@page "/passreset"
@using Supabase.Gotrue

@inject NavigationManager Navigation
@inject Supabase.Client SBClient
@inject ISnackbar Snackbar

<PageHeader Title="Reset Password">Reset Password</PageHeader>

<MudTextField @bind-Value="_password" Label="New password" Variant="Variant.Outlined" Margin="Margin.Dense" />

<MudButton Color="Color.Primary" OnClick="OnClick" Variant="Variant.Filled">Reset</MudButton>

@code {

    [SupplyParameterFromQuery] 
    public string? TokenHash { get; set; }
    
    private string _password;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var status = await TryLogUserIn();
        if (!status)
        {
            Navigation.NavigateTo("/");
        }
    }


    private async Task<bool> TryLogUserIn()
    {
        if (string.IsNullOrEmpty(TokenHash))
        {
            Snackbar.Add("Missing params...", Severity.Info);
            return false;
        }

        try
        {
            var session = await SBClient.Auth.VerifyTokenHash(TokenHash);
            if (session is null || session.Expired())
            {
                return false;
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Something went wrong...", Severity.Error);
        }

        return true;
    }
    

    private async Task OnClick()
    {
        if (SBClient.Auth.CurrentSession is null || SBClient.Auth.CurrentSession.Expired())
        {
            Snackbar.Add("Invalid session...", Severity.Info);
            return;
        }

        try
        {
            await SBClient.Auth.Update(new UserAttributes
            {
                Password = _password
            });
            
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.ToString());
            return;
        }

        Snackbar.Add("Done", Severity.Success);
    }


}