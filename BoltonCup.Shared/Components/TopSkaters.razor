@inject Data.IBCData BCData
@inject NavigationManager Navigation

@if (orderedSkaters is not null && StatValue is not null && selectedSkater is not null && profilePictures is not null)
{
    <MudGrid Class="px-sm-6 py-6">
    <MudItem Class="d-flex justify-center" xs="6">
        <MudPaper Class="d-flex justify-center align-center flex-grow-1">
            <MudStack Class="d-flex align-center">
                <MudAvatar Class="clickable" Style="height: 120px; width: 120px;" @onclick=@(() =>
                    Navigation.NavigateTo($"player/{selectedSkater.PlayerId}"))>
                    <MudImage Src="@profilePictures.Where(p => p.PlayerId == selectedSkater.PlayerId).First().Source"
                        Height="200" />
                </MudAvatar>

                <MudText Class="d-flex justify-center clickable" @onclick=@(() =>
                    Navigation.NavigateTo($"player/{selectedSkater.PlayerId}")) Typo="Typo.h5">
                    <b>@selectedSkater.Name.ToUpper()</b>
                </MudText>

                <MudStack Class="d-flex align-center" Row="true">
                    <MudImage Src=@($"logos/logo-{selectedSkater.TeamId}.png") Height="50" />
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudText Typo="Typo.body1">#@selectedSkater.PlayerNumber</MudText>
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudText Typo="Typo.body1">@selectedSkater.Position.First()</MudText>
                </MudStack>

                <MudText Class="d-flex justify-center" Typo="Typo.h6">@Label.ToUpper()</MudText>
                <MudText Class="d-flex justify-center" Typo="Typo.h2">@StatValue(selectedSkater)</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem Class="d-flex justify-center" Style="min-height: 60vh;" xs="6">
        <MudStack>
            @{
                    int rank = 1;
                    foreach (Data.PlayerStatline skater in orderedSkaters.Take(6))
                    {
                        int playerRank = rank;
                        <MudButton OnClick="() => selectedSkater = skater" Color="@skaterButtonColor(skater)"
                            Variant="@skaterButtonVariant(skater)">
                            <MudStack Class="d-flex flex-grow-1" Row="true">
                                <MudText>@playerRank</MudText>
                                <MudText Class="d-flex flex-grow-1">@skater.Name.ToUpper()</MudText>
                                <MudText>@StatValue(skater)</MudText>
                            </MudStack>
                        </MudButton>
                        rank++;
                    }
                }
            </MudStack>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Class="px-sm-6 py-6">
    <MudItem Class="d-flex justify-center" xs="6">
        <MudSkeleton SkeletonType="SkeletonType.Circle" Height="120px" Width="120px" />
    </MudItem>
    <MudItem Class="d-flex justify-center" Style="min-height: 60vh;" xs="6">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="60vh" Width="100%" />
    </MudItem>
</MudGrid>
}

@code {
    [Parameter] public IEnumerable<Data.PlayerStatline>? Skaters { get; set; }
    [Parameter] public Func<Data.PlayerStatline, int>? StatValue { get; set; }
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public bool Ascending { get; set; } = false;

    private IEnumerable<Data.PlayerStatline>? orderedSkaters { get; set; }
    private Data.PlayerStatline? selectedSkater;
    private IEnumerable<Data.PlayerProfilePicture>? profilePictures;


    protected override async Task OnInitializedAsync()
    {
        orderedSkaters = StatValue is null ? Skaters : Skaters?.OrderBy(s => StatValue(s));
        if (!Ascending)
        {
            orderedSkaters = orderedSkaters?.Reverse();
        }
        selectedSkater = orderedSkaters?.First();
        profilePictures = await BCData.GetPlayerProfilePictures();
    }

    private Variant skaterButtonVariant(Data.PlayerStatline skater) => (skater.PlayerId == selectedSkater!.PlayerId) ?
    Variant.Filled : Variant.Outlined;
    private Color skaterButtonColor(Data.PlayerStatline skater) => (skater.PlayerId == selectedSkater!.PlayerId) ?
    Color.Primary : Color.Default;
}