@namespace BoltonCup.Components

<Grid RowColumns="RowColumns.Are2" Padding="Padding.Is4.FromBottom">
    <Column ColumnSize="ColumnSize.Is2" Margin="Margin.IsAuto">
        <Heading Size="HeadingSize.Is6">Sort by</Heading>
    </Column>
    <Column ColumnSize="ColumnSize.Is10">
        <Buttons Role="ButtonsRole.Toolbar">
            <Buttons>
                <Button Color='@(sortRule.Equals("available") ? Color.Primary : Color.Light)'
                    Clicked='() => sortRule = "available"'>AVAILABLE</Button>
                <Button Color='@(sortRule.Equals("highest") ? Color.Primary : Color.Light)'
                    Clicked='() => sortRule = "highest"'>HIGHEST PLAYED</Button>
                <Button Color='@(sortRule.Equals("year") ? Color.Primary : Color.Light)'
                    Clicked='() => sortRule = "year"'>YEAR</Button>
            </Buttons>
        </Buttons>
    </Column>
</Grid>

<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Dark">
        <TableRow TextAlignment="TextAlignment.Center">
            <TableHeaderCell>TEAM</TableHeaderCell>
            <TableHeaderCell>NAME</TableHeaderCell>
            <TableHeaderCell>YEAR</TableHeaderCell>
            <TableHeaderCell>POS</TableHeaderCell>
            <TableHeaderCell>HIGHEST PLAYED</TableHeaderCell>
            <TableHeaderCell>G1</TableHeaderCell>
            <TableHeaderCell>G2</TableHeaderCell>
            <TableHeaderCell>G3</TableHeaderCell>
            <TableHeaderCell>F</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @if (Players != null)
        {
            foreach (var p in SortBy(Players, sortRule))
            {
                DraftPlayer player = p;
                if (player.Position.Length == 0) continue;
                <TableRow TextAlignment="TextAlignment.Center">
                    <TableRowCell>@p.Team</TableRowCell>
                    <TableRowCell>@p.Name</TableRowCell>
                    <TableRowCell>@p.DOB.Substring(0, 4)</TableRowCell>
                    <TableRowCell>@p.Position.First()</TableRowCell>
                    <TableRowCell>@p.HighestLvl</TableRowCell>
                    @CanPlayTableRowCell(p.CanPlayGame1)
                    @CanPlayTableRowCell(p.CanPlayGame2)
                    @CanPlayTableRowCell(p.CanPlayGame3)
                    @CanPlayTableRowCell(p.CanPlayGame4)
                </TableRow>
            }
        }
    </TableBody>
</Table>

@code {

    string sortRule = "available";

    RenderFragment CanPlayTableRowCell(string status) => __builder =>
    {
        IFluentBorderWithAll border = Border.Is4.Success.OnBottom;
        if (status == "No") { border = Border.Is4.Danger.OnBottom; }
        else if (status == "Maybe") { border = Border.Is4.Info.OnBottom; }
        <TableRowCell Border="@border">@status</TableRowCell>

    };
    [Parameter] public List<DraftPlayer>? Players { get; set; } = null;

    List<DraftPlayer> SortBy(List<DraftPlayer> players, string key)
    {
        List<DraftPlayer> retval = new();

        if (key == "available")
        {
            retval.AddRange(players.Where(p => p.Team.Length == 0).ToList());
            retval.AddRange(players.Where(p => p.Team.Length != 0).ToList());
        }
        else if (key == "highest")
        {
            var comparer = (string level) =>
            {
                if (level.Equals("Jr A or higher"))
                {
                    return 0;
                }
                else if (level.Equals("Jr B"))
                {
                    return 1;
                }
                else if (level.Equals("Jr C"))
                {
                    return 2;
                }
                else if (level.Equals("AAA"))
                {
                    return 3;
                }
                else if (level.Equals("A/AA"))
                {
                    return 4;
                }
                return 5;
            };

            retval = players.OrderBy(p => comparer(p.HighestLvl)).ToList();
        }
        else if (key == "year")
        {
            retval = players.OrderBy(p => int.Parse(p.DOB.Substring(0, 4))).ToList();
        }

        return retval;
    }
}