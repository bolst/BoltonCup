@namespace BoltonCup.Components
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager
@using System.Timers


@if (draftService == null)
{
    <Div Margin="Margin.Is4" Border="Border.Rounded" Shadow="Shadow.Default" Padding="Padding.Is4">
        <Grid RowColumns="RowColumns.Are1" Padding="Padding.Is4.OnY">
            <Column ColumnSize="ColumnSize.IsFull" Margin="Margin.IsAuto">
                <Switch TValue="bool" @bind-Checked="@useSnake">Snake</Switch>
            </Column>
        </Grid>

        <Grid RowColumns="RowColumns.Are4" Padding="Padding.Is4.OnY">
            <Column ColumnSize="ColumnSize.IsQuarter" Margin="Margin.IsAuto" TextAlignment="TextAlignment.Center">
                @TeamSelectComponent("1")
            </Column>
            <Column ColumnSize="ColumnSize.IsQuarter" Margin="Margin.IsAuto" TextAlignment="TextAlignment.Center">
                @TeamSelectComponent("2")
            </Column>
            <Column ColumnSize="ColumnSize.IsQuarter" Margin="Margin.IsAuto" TextAlignment="TextAlignment.Center">
                @TeamSelectComponent("3")
            </Column>
            <Column ColumnSize="ColumnSize.IsQuarter" Margin="Margin.IsAuto" TextAlignment="TextAlignment.Center">
                @TeamSelectComponent("4")
            </Column>
        </Grid>

        <Grid RowColumns="RowColumns.Are1" Padding="Padding.Is4.OnY">
            <Column ColumnSize="ColumnSize.IsFull" Margin="Margin.IsAuto">
                <FileEdit Changed="@OnChanged" />
            </Column>
        </Grid>
    </Div>
}
else
{
    <Div Padding="Padding.Is4" TextAlignment="TextAlignment.Center">
        <Heading Size="HeadingSize.Is4" Margin="Margin.IsAuto" Padding="Padding.Is4.FromBottom">
            ROUND @currentRound PICK @currentPick: @currentTeam.Name
        </Heading>
        <Button Color="Color.Secondary" Clicked="ShowModal">MAKE PICK</Button>
        @if (draftService.GetAvailablePlayers().Count == 1)
        {
            <Button Color="Color.Success" Clicked="EndDraft" Margin="Margin.Is4.OnX">END DRAFT</Button>
        }
    </Div>

    <Grid RowColumns="RowColumns.Are3">
        <Column ColumnSize="ColumnSize.Is4"></Column>

        <Column ColumnSize="ColumnSize.Is4" TextAlignment="TextAlignment.Center">
            <Heading>@TimeUntil.ToString(@"mm\:ss")</Heading>
        </Column>

        <Column ColumnSize="ColumnSize.Is4"></Column>
    </Grid>



    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@((string name) => selectedTab = name)">
        <Items>
            <Tab Name="players">PLAYERS</Tab>
            <Tab Name="rosters">ROSTERS</Tab>
            <Tab Name="picks">PICKS</Tab>
        </Items>
        <Content>
            <TabPanel Name="players">
                @if (allPlayers != null)
                {
                    <Grid RowColumns="RowColumns.Are4" Margin="Margin.Is4.OnTablet.Is0.OnMobile" Border="Border.Rounded"
                        Shadow="Shadow.Default" Padding="Padding.Is4">
                        <Column ColumnSize="ColumnSize.Is12">
                            <AllPlayersTable Players="@allPlayers" />
                        </Column>
                    </Grid>
                }
            </TabPanel>
            <TabPanel Name="rosters">
                <Grid RowColumns="RowColumns.Are4" Margin="Margin.Is4.OnTablet.Is0.OnMobile" Border="Border.Rounded"
                    Shadow="Shadow.Default" Padding="Padding.Is4">
                    @PlayerList(Api.TeamService.Instance().GetTeamByID("1"), Border.Is2.Primary.OnBottom)
                    @PlayerList(Api.TeamService.Instance().GetTeamByID("2"), Border.Is2.Secondary.OnBottom)
                    @PlayerList(Api.TeamService.Instance().GetTeamByID("3"), Border.Is2.Warning.OnBottom)
                    @PlayerList(Api.TeamService.Instance().GetTeamByID("4"), Border.Is2.Info.OnBottom)
                </Grid>
            </TabPanel>
            <TabPanel Name="picks">
                <Grid RowColumns="RowColumns.Are4" Margin="Margin.Is4.OnTablet.Is0.OnMobile" Border="Border.Rounded"
                    Shadow="Shadow.Default" Padding="Padding.Is4">
                    <Column ColumnSize="ColumnSize.Is3" TextAlignment="TextAlignment.Center">
                        @for (int i = 0; i < 4; i++)
                        {
                            int j = i;
                            bool roundDisplayed = false;
                            foreach (var p in GetRange(draftService.picks, i * 16, 4))
                            {
                                if (!roundDisplayed)
                                {
                                    <Heading Size="HeadingSize.Is6">ROUND @(1 + 4 * j)</Heading>
                                    roundDisplayed = true;
                                }
                                DraftPick pick = p;
                                <DraftPickCard Pick="@pick" />
                            }
                            <br>
                        }
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3" TextAlignment="TextAlignment.Center">
                        @for (int i = 0; i < 4; i++)
                        {
                            int j = i;
                            bool roundDisplayed = false;
                            foreach (var p in GetRange(draftService.picks, i * 16 + 4, 4))
                            {
                                if (!roundDisplayed)
                                {
                                    <Heading Size="HeadingSize.Is6">ROUND @(2 + 4 * j)</Heading>
                                    roundDisplayed = true;
                                }
                                DraftPick pick = p;
                                <DraftPickCard Pick="@pick" />
                            }
                            <br>
                        }
                        <DraftPickCard />
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3" TextAlignment="TextAlignment.Center">
                        @for (int i = 0; i < 4; i++)
                        {
                            int j = i;
                            bool roundDisplayed = false;
                            foreach (var p in GetRange(draftService.picks, i * 16 + 8, 4))
                            {
                                if (!roundDisplayed)
                                {
                                    <Heading Size="HeadingSize.Is6">ROUND @(3 + 4 * j)</Heading>
                                    roundDisplayed = true;
                                }
                                DraftPick pick = p;
                                <DraftPickCard Pick="@pick" />
                            }
                            <br>
                        }
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3" TextAlignment="TextAlignment.Center">
                        @for (int i = 0; i < 3; i++)
                        {
                            int j = i;
                            bool roundDisplayed = false;
                            foreach (var p in GetRange(draftService.picks, i * 16 + 12, 4))
                            {
                                if (!roundDisplayed)
                                {
                                    <Heading Size="HeadingSize.Is6">ROUND @(4 + 4 * j)</Heading>
                                    roundDisplayed = true;
                                }
                                DraftPick pick = p;
                                <DraftPickCard Pick="@pick" />
                            }
                            <br>
                        }
                    </Column>
                </Grid>
            </TabPanel>
        </Content>
    </Tabs>




    <Modal @ref="modalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>@($"R{currentRound}P{currentPick}: {currentTeam.Name}")</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Selection</FieldLabel>
                    <Select @bind-SelectedValue="@selectedPlayer">
                        @foreach (var p in draftService.GetAvailablePlayers())
                        {
                            DraftPlayer player = p;
                            <SelectItem Value="@player.Name">@player.Name</SelectItem>
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@DraftPlayer">DRAFT PLAYER</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}






@code {
    #region Order Selection
    Dictionary<string, string> order = new()
{
{"1","1"},
{"2","2"},
{"3","3"},
{"4","4"}
};
    RenderFragment TeamSelectComponent(string pick) => __builder =>
    {
        string heading = "FIRST";
        if (pick == "2")
        {
            heading = "SECOND";
        }
        else if (pick == "3")
        {
            heading = "THIRD";
        }
        else if (pick == "4")
        {
            heading = "FOURTH";
        }
        <Heading Size="HeadingSize.Is5">@heading</Heading>
        <Select @bind-SelectedValue="@order[pick]">
            <SelectItem Value=@("1")>@Api.TeamService.Instance().GetTeamByID("1").Name</SelectItem>
            <SelectItem Value=@("2")>@Api.TeamService.Instance().GetTeamByID("2").Name</SelectItem>
            <SelectItem Value=@("3")>@Api.TeamService.Instance().GetTeamByID("3").Name</SelectItem>
            <SelectItem Value=@("4")>@Api.TeamService.Instance().GetTeamByID("4").Name</SelectItem>
        </Select>
    };

    #endregion

    #region Timer
    static Timer myTimer;
    TimeSpan TimeUntil = new TimeSpan(0, 3, 0); // 3 minutes
    TimeSpan dt = new TimeSpan(0, 0, 1); // 1 second decrements
    void StartTimer()
    {
        TimeUntil = new TimeSpan(0, 3, 0);
        myTimer = new Timer(1000);
        myTimer.Elapsed += DraftTimer;
        myTimer.Enabled = true;
    }
    void ResetTimer()
    {
        TimeUntil = new TimeSpan(0, 3, 0);
    }
    public void DraftTimer(Object source, ElapsedEventArgs e)
    {
        if (TimeUntil.Minutes == 0 && TimeUntil.Seconds == 0)
        {
            myTimer.Enabled = false;
        }
        else
        {
            TimeUntil = TimeUntil.Subtract(dt);
        }
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Modal

    private Modal modalRef;

    private Task ShowModal() { return modalRef.Show(); }
    private Task HideModal() { return modalRef.Hide(); }
    string selectedPlayer;

    #endregion

    RenderFragment PlayerList(TeamData team, IFluentBorderWithAll border) => __builder =>
    {
        int g1c = GetGamePlayerCount(allPlayers.Where(p => p.Team == team.Name).ToList(), 1);
        int g2c = GetGamePlayerCount(allPlayers.Where(p => p.Team == team.Name).ToList(), 2);
        int g3c = GetGamePlayerCount(allPlayers.Where(p => p.Team == team.Name).ToList(), 3);
        int g4c = GetGamePlayerCount(allPlayers.Where(p => p.Team == team.Name).ToList(), 4);
        int fc = team.Players.Where(p => p.PosAbbrev() == "F").ToList().Count;
        int fdc = team.Players.Where(p => p.PosAbbrev() == "F/D").ToList().Count;
        int dc = team.Players.Where(p => p.PosAbbrev() == "D").ToList().Count;
        int gc = team.Players.Where(p => p.PosAbbrev() == "G").ToList().Count;
        <Column ColumnSize="ColumnSize.Is3" TextAlignment="TextAlignment.Center">
            <Heading Size="HeadingSize.Is5" TextWeight="TextWeight.Bold">@team.Name</Heading>
            <Heading Size="HeadingSize.Is6">@($"{fc}F {dc}D {gc}G {fdc}F/D")</Heading>
            <Heading Size="HeadingSize.Is6" Border="@border">@($"{g1c}-{g2c}-{g3c}-{g4c}")</Heading>
            @foreach (var p in team.Players)
            {
                TeamPlayer player = p;
                <Heading Size="HeadingSize.Is6">@player.Name</Heading>
            }
        </Column>
    };

    string selectedTab = "players";
    List<DraftPlayer>? allPlayers = null;

    bool useSnake = true;

    int currentRound = 1;
    int currentPick = 1;

    TeamData currentTeam = Api.TeamService.Instance().GetTeamByID("1")!;

    Api.DraftService? draftService = null;

    async Task OnChanged(FileChangedEventArgs e)
    {
        try
        {
            var file = e.Files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (MemoryStream stream = new MemoryStream())
            {
                await file.OpenReadStream(long.MaxValue).CopyToAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                var reader = new StreamReader(stream);

                draftService = new(reader.ReadToEnd(), order);
                allPlayers = draftService.draftPlayers;
                currentRound = draftService.GetCurrentRound();
                currentPick = draftService.GetCurrentPick();
                currentTeam = useSnake ? draftService.GetCurrentTeamSnake() : draftService.GetCurrentTeam();
                selectedPlayer = "";
                Api.TeamService.Instance().Fetch();
                StartTimer();
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    void DraftPlayer()
    {
        draftService!.MakePick(currentTeam, selectedPlayer);
        currentRound = draftService.GetCurrentRound();
        currentPick = draftService.GetCurrentPick();
        currentTeam = useSnake ? draftService.GetCurrentTeamSnake() : draftService.GetCurrentTeam();
        selectedPlayer = "";
        ResetTimer();
        HideModal();
        StateHasChanged();
    }

    async Task EndDraft()
    {
        myTimer.Enabled = false;
        Api.TeamService.Instance().Save();
        //Api.TeamService.Instance().Fetch();
        navManager.NavigateTo("/teams");
    }

    int GetGamePlayerCount(List<DraftPlayer> players, int gameNum)
    {
        switch (gameNum)
        {
            case 1:
                return players.Where(p => p.CanPlayGame1 == "Yes").Count();
            case 2:
                return players.Where(p => p.CanPlayGame2 == "Yes").Count();
            case 3:
                return players.Where(p => p.CanPlayGame3 == "Yes").Count();
            case 4:
                return players.Where(p => p.CanPlayGame4 == "Yes").Count();
            default:
                return 0;
        }
    }

    // Essentially just List.GetRange but with bound checks
    List<DraftPick> GetRange(List<DraftPick> list, int start, int count)
    {
        try
        {

            if (start >= list.Count)
            {
                return new();
            }
            else if (start + count >= list.Count)
            {
                count = list.Count - start;
            }
            return list.GetRange(start, count);
        }
        catch (Exception exc)
        {
            Console.WriteLine(start.ToString() + " " + count.ToString() + " " + list.Count);
            return new();
        }
    }
}