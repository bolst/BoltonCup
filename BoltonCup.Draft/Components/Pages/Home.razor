@page "/"

@inject Data.DraftServiceProvider Drafter
@inject HubConnectionProvider Hub


<MudStack Style="width: 100%" AlignItems="AlignItems.Start" Wrap="Wrap.Wrap" Justify="Justify.SpaceEvenly" Row>
    @foreach (var round in DraftRoundGrouping)
    {
        <MudPaper Height="280px" Width="300px" Style="background-color: #232636">
            <MudText Class="ma-2" Typo="Typo.h6" Color="Color.Tertiary"><b>Round @round.Key</b></MudText>
            @foreach (var pick in round)
            {
                <MudPaper Style="background-color: #232636" Width="300px" Height="40px">
                    <div class="d-flex align-center flex-row">
                        <div class="d-flex justify-center" style="width: 40px">
                            <MudText Typo="Typo.h6" Class="px-2" Color="Color.Tertiary"><b>@pick.pick</b></MudText>
                        </div>
                        <div class="d-flex align-center flex-row" style="@($"height: 40px; width: 40px; background-color: {pick.PrimaryColorHex}DD")">
                            <MudImage Src="@pick.TeamLogo" Width="40" />
                        </div>
                        <MudPaper Class="white pa-2" Width="218px" Height="38px" Elevation="0" Square>
                            <MudText Align="Align.Start" Typo="Typo.subtitle2">@pick.Name.ToUpper()</MudText>
                        </MudPaper>
                    </div>
                </MudPaper>
            }
        </MudPaper>
    }
</MudStack>


@code {

    private BCDraftPick? _currentPick;
    private BCTeam? _teamWithCurrentPick;
    private IEnumerable<BCDraftPickDetail> _draftPicks = [];

    private IEnumerable<IGrouping<int, BCDraftPickDetail>> DraftRoundGrouping 
        => _draftPicks
            .OrderByDescending(x => x.round)
            .ThenBy(x => x.pick)
            .GroupBy(x => x.round);

    protected override async Task OnInitializedAsync()
    {
        
        await LoadDataAsync();
        await InitializeHubConnection();
    }

    private async Task LoadDataAsync()
    {
        (_teamWithCurrentPick, _currentPick) = await Drafter.GetTeamWithCurrentPick();
        _draftPicks = await Drafter.GetDraftedPlayersAsync();
    }
    
    
    private async Task InitializeHubConnection()
    {
        var connection = await Hub.GetHubConnection();
        
        connection.On(DraftHub.Events.OnDraftUpdate, async () =>
        {
            await LoadDataAsync();
            InvokeAsync(StateHasChanged);
        });
    }
}