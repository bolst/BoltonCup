@inject Data.DraftServiceProvider Drafter
@inject IDialogService DialogService


@if (_teams is not null)
{
    
    <MudStack Class="py-4" AlignItems="AlignItems.Center" Spacing="2">
        <PickTimer />
        
        <MudDivider />
     
        @foreach (var team in _teams)
        {
            if (_currentTeam is not null && _currentTeam.id == team.id)
            {
                <MudPaper 
                    Class="d-flex align-center border-double border-4" 
                    Style="@($"border-color: {team.secondary_color_hex}; box-shadow: inset 0 0 0 2000px {team.primary_color_hex}ff;")" 
                    Height="50px" 
                    Width="100%" 
                    Square>
                    <MudStack AlignItems="AlignItems.Center" Row>
                        <MudImage Src="@team.logo_url" Height="40" />
                        <MudText Typo="Typo.button" Style="@($"color: {team.secondary_color_hex}")"><b>@team.name_short</b></MudText>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper 
                    Class="d-flex align-center" 
                    Style="@($"box-shadow: inset 0 0 0 2000px {team.primary_color_hex}66;")" 
                    Height="50px" 
                    Width="100%" 
                    Square>
                    <MudStack AlignItems="AlignItems.Center" Row>
                        <MudImage Src="@team.logo_url" Height="40" />
                        <MudText Typo="Typo.button" Style="@($"color: {team.secondary_color_hex}")"><b>@team.name_short</b></MudText>
                    </MudStack>
                </MudPaper>
            }
        }
        
        <MudSpacer />
        
        <MudButton OnClick="OnDraftBoardClicked" Color="Color.Info" Size="Size.Large" Variant="Variant.Filled">Draft Board</MudButton>
    </MudStack>
}

@code{

    private IEnumerable<BCTeam>? _teams { get; set; }
    private BCTeam? _currentTeam { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _teams = await Drafter.GetTeamsInDraftAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var (team, _) = await Drafter.GetTeamWithCurrentPick();
        _currentTeam = team;
    }

    private Task OnDraftBoardClicked()
    {
        DialogOptions options = new()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            CloseButton = true, 
            CloseOnEscapeKey = true,
        };

        return DialogService.ShowAsync<DraftBoardDialog>("Draft Board", options);
    }

}