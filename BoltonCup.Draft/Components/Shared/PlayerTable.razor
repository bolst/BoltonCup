@inject IBCData BCData
@inject Data.DraftServiceProvider Drafter
@inject IDialogService DialogService
@inject HubConnectionProvider Hub

@if (_players is not null)
{
    <MudDataGrid
        T="PlayerProfile"
        Items="_filteredPlayers"
        Height="calc(85vh - 4rem)"
        QuickFilter="QuickFilter"
        Fil
        ShowColumnOptions="false"
        FixedHeader>
        <ToolBarContent>
            <MudMenu 
                Label="Actions" 
                Variant="Variant.Filled" 
                EndIcon="@Icons.Material.Filled.KeyboardArrowDown" 
                IconColor="Color.Error" 
                Dense>
                <MudMenuItem Label="Reset" Class="red-text" OnClick="OnResetDraft" />
            </MudMenu>
            
            <MudChipSet T="string" Variant="Variant.Text" SelectedValue="_positionFilter" SelectedValueChanged="PositionFilterChanged" SelectionMode="SelectionMode.ToggleSelection">
                <MudChip Text="F" Color="Color.Primary" Value="@("forward")" />
                <MudChip Text="D" Color="Color.Secondary" Value="@("defense")" />
                <MudChip Text="G" Color="Color.Tertiary" Value="@("goalie")" />
            </MudChipSet>
            
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>

        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <MudButton 
                        Color="Color.Default" 
                        Variant="Variant.Filled"
                        OnClick="@(() => OnPlayerDrafted(context.Item))">DRAFT</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.name" Title="Name" />
            <PropertyColumn Property="x => x.position.ToUpper().First()" Title="Pos." />
            <PropertyColumn Property="x => x.HighestLevel" Title="Highest Level" SortBy="SortByHighestLevel" />
            <PropertyColumn Property="@(x => x.dob.ToString("yyyy"))" Title="Birth year"/>
        </Columns>
    </MudDataGrid>
}

@code {

    private IEnumerable<PlayerProfile>? _players;
    private HashSet<PlayerProfile> _filteredPlayers = new();
    private string _searchString;
    private string _positionFilter;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await InitializeHubConnection();
    }

    private async Task LoadDataAsync()
    {
        _players = (await BCData.GetAllTournamentPlayersAsync(Drafter.DraftId))
            .Where(p => p.team_id is null)
            .OrderBy(SortByHighestLevel);
        _filteredPlayers = new(_players);
    }

    private async Task OnResetDraft()
    {
        await Drafter.ResetDraftAsync();
        await LoadDataAsync();
    }

    private Task OnPlayerDrafted(PlayerProfile player)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.False,
            FullWidth = false,
        };
        var parameters = new DialogParameters<DraftPlayerDialog>
        {
            { x => x.Player, player },
        };
        return DialogService.ShowAsync<DraftPlayerDialog>("Draft Player", parameters, options);
    }
    
    private Func<PlayerProfile, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void PositionFilterChanged(string? position)
    {
        if (_players is null || string.IsNullOrEmpty(position)) return;
        
        _filteredPlayers = new(_players.Where(p => p.position == position));
    }

    private Func<PlayerProfile, object> SortByHighestLevel => x =>
    {
        return x.HighestLevel switch
        {
            "Jr. A or higher" => 0,
            "Jr. B" => 1,
            "Jr. C" => 2,
            "AAA" => 3,
            "A/AA" => 4,
            "House league" => 5,
            _ => 1000
        };
    };
    
    private async Task InitializeHubConnection()
    {
        var connection = await Hub.GetHubConnection();
        
        connection.On(DraftHub.Events.OnDraftUpdate, async () =>
        {
            await LoadDataAsync();
            
            InvokeAsync(StateHasChanged);
        });
    }

}