@inject IBCData BCData
@inject Data.DraftServiceProvider Drafter
@inject IDialogService DialogService

@if (_players is not null)
{
    <MudDataGrid
        T="PlayerProfile"
        Items="_players.Where(p => p.team_id is null)"
        Height="calc(85vh - 4rem)"
        QuickFilter="QuickFilter"
        FixedHeader>
        <ToolBarContent>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <MudButton 
                        Color="Color.Default" 
                        Variant="Variant.Filled"
                        OnClick="@(() => OnPlayerDrafted(context.Item))">DRAFT</MudButton>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.name" Title="Name" />
            <PropertyColumn Property="x => x.position.ToUpper().First()" Title="Pos." />
            <PropertyColumn Property="x => x.HighestLevel" Title="Highest Level" />
            <PropertyColumn Property="@(x => x.dob.ToString("yyyy"))" Title="Birth year"/>
        </Columns>
    </MudDataGrid>
}

@code {

    private IEnumerable<PlayerProfile>? _players;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        _players = await BCData.GetAllTournamentPlayersAsync(Drafter.DraftId);
    }

    private Task OnPlayerDrafted(PlayerProfile player)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.False,
            FullWidth = false,
        };
        var parameters = new DialogParameters<DraftPlayerDialog>
        {
            { x => x.Player, player },
        };
        return DialogService.ShowAsync<DraftPlayerDialog>("Draft Player", parameters, options);
    }
    
    private Func<PlayerProfile, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

}