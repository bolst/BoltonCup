@inject IBCData BCData
@inject Data.DraftServiceProvider Drafter
@inject IDialogService DialogService
@inject HubConnectionProvider Hub
@inject Supabase.Client SBClient

@if (_players is not null)
{
    <MudDataGrid
        T="PlayerProfile"
        Items="_filteredPlayers"
        Height="calc(90vh - 4rem)"
        QuickFilter="QuickFilter"
        RowClassFunc="RowClassFunc"
        ShowColumnOptions="false"
        FixedHeader
        Dense>
        <ToolBarContent>
            <AuthorizeView Roles="admin">
                <MudMenu
                    Label="Actions"
                    Variant="Variant.Filled"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                    IconColor="Color.Error"
                    Dense>
                    <MudMenuItem Label="Reset" Class="red-text" OnClick="OnResetDraft"/>
                </MudMenu>
            </AuthorizeView>

            <MudChipSet T="string" Variant="Variant.Text" SelectedValue="_positionFilter" SelectedValueChanged="PositionFilterChanged" SelectionMode="SelectionMode.ToggleSelection">
                <MudChip Text="F" Color="Color.Primary" Value="@("forward")"/>
                <MudChip Text="D" Color="Color.Secondary" Value="@("defense")"/>
                <MudChip Text="G" Color="Color.Warning" Value="@("goalie")"/>
            </MudChipSet>

            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>

        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <AuthorizeView Roles="captain,admin" Context="authContext">
                        <AuthorizeView Roles="captain" Context="captainContext">
                            <MudButton
                                Color="Color.Default"
                                Variant="Variant.Filled"
                                OnClick="@(() => OnPlayerDrafted(context.Item))"
                                Disabled="!UserCanPick">DRAFT</MudButton>
                        </AuthorizeView>
                        <AuthorizeView Roles="admin" Context="adminContext">
                            <MudButton
                                Color="Color.Default"
                                Variant="Variant.Filled"
                                OnClick="@(() => OnPlayerDrafted(context.Item))">DRAFT</MudButton>
                        </AuthorizeView>
                    </AuthorizeView>                    
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.name" Title="Name" CellStyle="" />
            <PropertyColumn Property="x => x.position" Title="Pos.">
                <CellTemplate>
                    <PositionChip Position="@context.Item.position" Size="Size.Small" />
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.HighestLevel" Title="Highest Level" SortBy="SortByHighestLevel" />
            <PropertyColumn Property="@(x => x.dob.ToString("yyyy"))" Title="Birth year"/>
        </Columns>
    </MudDataGrid>
}

@code {

    private IEnumerable<PlayerProfile>? _players;
    private HashSet<PlayerProfile> _filteredPlayers = new();
    private string _searchString;
    private string _positionFilter;
    private BCTournament? _currentTournament;
    private BCTeam? _currentTeam;
    private IEnumerable<BCAccount> _currentRoster = [];

    private BCAccount? _currentUser;
    private bool UserCanPick => _currentUser is not null && (_currentTeam?.gm_account_id == _currentUser.id);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await InitializeHubConnection();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var user = SBClient.Auth.CurrentUser;
        if (user?.Email is not null)
        {
            _currentUser = await BCData.GetAccountByEmailAsync(user.Email);
        }
    }

    private async Task LoadDataAsync()
    {
        (_currentTeam, _) = await Drafter.GetTeamWithCurrentPick();
        _currentRoster = await BCData.GetAccountsByTeamIdAsync(_currentTeam.id);
        _currentTournament = await BCData.GetCurrentTournamentAsync();
        if (_currentTournament is not null)
        {
            _players = (await BCData.GetDraftAvailableTournamentPlayersAsync(_currentTournament.tournament_id)).OrderBy(SortByHighestLevel);
            _filteredPlayers = new(_players);
        }
    }

    private async Task OnResetDraft()
    {
        await Drafter.ResetDraftAsync();
        await LoadDataAsync();
    }

    private Task OnPlayerDrafted(PlayerProfile player)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.False,
            FullWidth = false,
        };
        var parameters = new DialogParameters<DraftPlayerDialog>
        {
            { x => x.Player, player },
        };
        return DialogService.ShowAsync<DraftPlayerDialog>("Draft Player", parameters, options);
    }
    
    private Func<PlayerProfile, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void PositionFilterChanged(string? position)
    {
        if (_players is null) return;

        if (string.IsNullOrEmpty(position))
        {
            _filteredPlayers = new(_players);
        }
        else
        {
            _filteredPlayers = new(_players.Where(p => p.position == position));
        }
    }

    private Func<PlayerProfile, object> SortByHighestLevel => x =>
    {
        return x.HighestLevel switch
        {
            "Jr. A or higher" => 0,
            "Jr. B" => 1,
            "Jr. C" => 2,
            "AAA" => 3,
            "A/AA" => 4,
            "House league" => 5,
            _ => 1000
        };
    };
    
    private async Task InitializeHubConnection()
    {
        var connection = await Hub.GetHubConnection();
        
        connection.On(DraftHub.Events.OnDraftUpdate, async () =>
        {
            await LoadDataAsync();
            
            InvokeAsync(StateHasChanged);
        });
    }

    private string RowClassFunc(PlayerProfile player, int row)
    {
        if (_currentRoster.Any(x => x.preferred_teammate1 == player.account_id || x.preferred_teammate2 == player.account_id))
        {
            return "green lighten-5";
        }

        return string.Empty;
    }

}