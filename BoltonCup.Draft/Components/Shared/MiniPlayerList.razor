@inject IBCData BCData


<MudSimpleTable Style="@($"height: {Height}; width: 100%")" Square="!Rounded" FixedHeader Dense Striped>
    <thead>
    <tr>
        <th style="width: 50px"></th>
        <th>@Header.ToUpper() (@PlayerCount)</th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @if (Players is not null)
    {
        foreach (var player in Players)
        {
            <tr>
                <td>
                    <MudImage Src="@player.ProfilePicture" Height="20" />
                </td>
                <td>@player.name</td>
                <td>
                    <MudTooltip Placement="Placement.Top" VisibleChanged="(value) => VisibleChanged(value, player)">
                        <TooltipContent>
                            @foreach (var prefPlayer in _preferredPlayers)
                            {
                                <MudText Typo="Typo.subtitle2">@prefPlayer.FullName</MudText>
                            }
                            @if (!_preferredPlayers.Any())
                            {
                                <MudText Typo="Typo.subtitle2">No preferred teammates</MudText>
                            }
                        </TooltipContent>
                        <ChildContent>
                            <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small"/>
                        </ChildContent>
                    </MudTooltip>
                </td>
            </tr>
        }
    }
    </tbody>
</MudSimpleTable>


@code {

    [Parameter] 
    public IEnumerable<PlayerProfile>? Players { get; set; }

    [Parameter] 
    public string Header { get; set; } = "Players";

    [Parameter] 
    public string Height { get; set; } = "150px";

    [Parameter] 
    public bool Rounded { get; set; }

    private int PlayerCount => Players?.Count() ?? 0;

    private IEnumerable<BCAccount> _preferredPlayers = [];

    private async Task VisibleChanged(bool value, PlayerProfile? player)
    {
        if (value && player?.account_id is not null)
        {
            _preferredPlayers = await BCData.GetUserPreferredPlayersAsync(player.account_id.Value);
        }
        else
        {
            _preferredPlayers = [];
        }
    }

}