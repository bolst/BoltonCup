@inject IJSRuntime JS
@inject Data.DraftServiceProvider Drafter
@inject HubConnectionProvider Hub

@implements IAsyncDisposable

<div class="d-flex justify-center">
    <MudStack Class="px-1" AlignItems="AlignItems.Center">
        <MudText Color="Color.Secondary" Typo="Typo.h1" HtmlTag="i"><b><span id="timersec"></span></b></MudText>
    </MudStack>
</div>

<MudStack Justify="Justify.Center" Spacing="0" Row>
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Secondary" OnClick="StartTimer"/>
    @if (_paused)
    {
        <MudIconButton Icon="@Icons.Material.Filled.PlayCircleOutline" Color="Color.Primary" OnClick="ResumeTimer"/>
    }
    else
    {
        <MudIconButton Icon="@Icons.Material.Filled.PauseCircleOutline" Color="Color.Secondary" OnClick="PauseTimer"/>
    }
</MudStack>

@code {

    private bool _paused;
    private const int TIME_LIMIT_SEC = 120;
    private IEnumerable<IDisposable> _connections = [];
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartTimer();
            await InitializeHubConnection();
        }
    }

    private async Task StartTimer()
    {
        _paused = false;
        await JS.InvokeVoidAsync("startTimer", TIME_LIMIT_SEC);
    }

    private async Task PauseTimer()
    {
        _paused = true;
        await JS.InvokeVoidAsync("pauseTimer");
    }

    private async Task ResumeTimer()
    {
        _paused = false;
        await JS.InvokeVoidAsync("resumeTimer");
    }
    
    private async Task InitializeHubConnection()
    {
        var connection = await Hub.GetHubConnection();
        
        var c1 = connection.On(DraftHub.Events.OnDraftUpdate, async () =>
        {
            await StartTimer();
        });

        _connections = _connections.Append(c1);
    }

    public async ValueTask DisposeAsync()
    {
        await PauseTimer();
        foreach (var connection in _connections)
        {
            connection.Dispose();
        }
        _connections = [];
    }
}